=begin
#IBM Cloud Resource Controller API

#Manage lifecycle of your Cloud resources using Resource Controller APIs. Resources are provisioned globally in an account scope. Supports asynchronous provisioning of resources. Enables consumption of a global resource through a Cloud Foundry space in any region.

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-beta2

=end

require 'cgi'

module IbmCloudResourceController
  class ResourceKeysApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new resource key
    # Create a new resource key.
    # @param resource_key_post [ResourceKeyPost] 
    # @param [Hash] opts the optional parameters
    # @return [ResourceKey]
    def create_resource_key(resource_key_post, opts = {})
      data, _status_code, _headers = create_resource_key_with_http_info(resource_key_post, opts)
      data
    end

    # Create a new resource key
    # Create a new resource key.
    # @param resource_key_post [ResourceKeyPost] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceKey, Integer, Hash)>] ResourceKey data, response status code and response headers
    def create_resource_key_with_http_info(resource_key_post, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceKeysApi.create_resource_key ...'
      end
      # verify the required parameter 'resource_key_post' is set
      if @api_client.config.client_side_validation && resource_key_post.nil?
        fail ArgumentError, "Missing the required parameter 'resource_key_post' when calling ResourceKeysApi.create_resource_key"
      end
      # resource path
      local_var_path = '/v2/resource_keys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(resource_key_post) 

      # return_type
      return_type = opts[:return_type] || 'ResourceKey' 

      # auth_names
      auth_names = opts[:auth_names] || ['IAM']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceKeysApi#create_resource_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a resource key by ID
    # Delete a resource key by ID.
    # @param id [String] The short or long ID of the key.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_resource_key(id, opts = {})
      delete_resource_key_with_http_info(id, opts)
      nil
    end

    # Delete a resource key by ID
    # Delete a resource key by ID.
    # @param id [String] The short or long ID of the key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_resource_key_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceKeysApi.delete_resource_key ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ResourceKeysApi.delete_resource_key"
      end
      # resource path
      local_var_path = '/v2/resource_keys/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['IAM']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceKeysApi#delete_resource_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get resource key by ID
    # Get resource key by ID.
    # @param id [String] The short or long ID of the key.
    # @param [Hash] opts the optional parameters
    # @return [ResourceKey]
    def get_resource_key(id, opts = {})
      data, _status_code, _headers = get_resource_key_with_http_info(id, opts)
      data
    end

    # Get resource key by ID
    # Get resource key by ID.
    # @param id [String] The short or long ID of the key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceKey, Integer, Hash)>] ResourceKey data, response status code and response headers
    def get_resource_key_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceKeysApi.get_resource_key ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ResourceKeysApi.get_resource_key"
      end
      # resource path
      local_var_path = '/v2/resource_keys/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ResourceKey' 

      # auth_names
      auth_names = opts[:auth_names] || ['IAM']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceKeysApi#get_resource_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all of the resource keys.
    # List all resource keys.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :guid When you create a new key, a GUID (globally unique identifier) is assigned. This is a unique internal GUID managed by Resource controller that corresponds to the key.
    # @option opts [String] :name The human-readable name of the key.
    # @option opts [String] :resource_group_id The short ID of the resource group.
    # @option opts [String] :resource_id The unique ID of the offering. This value is provided by and stored in the global catalog.
    # @option opts [String] :limit Limit on how many items should be returned.
    # @option opts [String] :updated_from Start date inclusive filter.
    # @option opts [String] :updated_to End date inclusive filter.
    # @return [ResourceKeysList]
    def list_resource_keys(opts = {})
      data, _status_code, _headers = list_resource_keys_with_http_info(opts)
      data
    end

    # Get a list of all of the resource keys.
    # List all resource keys.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :guid When you create a new key, a GUID (globally unique identifier) is assigned. This is a unique internal GUID managed by Resource controller that corresponds to the key.
    # @option opts [String] :name The human-readable name of the key.
    # @option opts [String] :resource_group_id The short ID of the resource group.
    # @option opts [String] :resource_id The unique ID of the offering. This value is provided by and stored in the global catalog.
    # @option opts [String] :limit Limit on how many items should be returned.
    # @option opts [String] :updated_from Start date inclusive filter.
    # @option opts [String] :updated_to End date inclusive filter.
    # @return [Array<(ResourceKeysList, Integer, Hash)>] ResourceKeysList data, response status code and response headers
    def list_resource_keys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceKeysApi.list_resource_keys ...'
      end
      # resource path
      local_var_path = '/v2/resource_keys'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'guid'] = opts[:'guid'] if !opts[:'guid'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'resource_group_id'] = opts[:'resource_group_id'] if !opts[:'resource_group_id'].nil?
      query_params[:'resource_id'] = opts[:'resource_id'] if !opts[:'resource_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'updated_from'] = opts[:'updated_from'] if !opts[:'updated_from'].nil?
      query_params[:'updated_to'] = opts[:'updated_to'] if !opts[:'updated_to'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ResourceKeysList' 

      # auth_names
      auth_names = opts[:auth_names] || ['IAM']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceKeysApi#list_resource_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a resource key
    # Update a resource key by ID.
    # @param id [String] The short or long ID of the key.
    # @param resource_key_patch [ResourceKeyPatch] 
    # @param [Hash] opts the optional parameters
    # @return [ResourceKey]
    def update_resource_key(id, resource_key_patch, opts = {})
      data, _status_code, _headers = update_resource_key_with_http_info(id, resource_key_patch, opts)
      data
    end

    # Update a resource key
    # Update a resource key by ID.
    # @param id [String] The short or long ID of the key.
    # @param resource_key_patch [ResourceKeyPatch] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceKey, Integer, Hash)>] ResourceKey data, response status code and response headers
    def update_resource_key_with_http_info(id, resource_key_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceKeysApi.update_resource_key ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ResourceKeysApi.update_resource_key"
      end
      # verify the required parameter 'resource_key_patch' is set
      if @api_client.config.client_side_validation && resource_key_patch.nil?
        fail ArgumentError, "Missing the required parameter 'resource_key_patch' when calling ResourceKeysApi.update_resource_key"
      end
      # resource path
      local_var_path = '/v2/resource_keys/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(resource_key_patch) 

      # return_type
      return_type = opts[:return_type] || 'ResourceKey' 

      # auth_names
      auth_names = opts[:auth_names] || ['IAM']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceKeysApi#update_resource_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

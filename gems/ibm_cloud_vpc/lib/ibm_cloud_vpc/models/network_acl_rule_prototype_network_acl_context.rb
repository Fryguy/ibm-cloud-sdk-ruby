=begin
#Virtual Private Cloud API

#The IBM Cloud Virtual Private Cloud (VPC) API can be used to programmatically provision and manage infrastructure resources, including virtual server instances, subnets, volumes, and load balancers.

The version of the OpenAPI document: 2020-09-08

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-beta2

=end

require 'date'

module IbmCloudVpc
  class NetworkACLRulePrototypeNetworkACLContext
    # Whether to allow or deny matching traffic
    attr_accessor :action

    # The destination IP address or CIDR block. The CIDR block `0.0.0.0/0` applies to all addresses.
    attr_accessor :destination

    # Whether the traffic to be matched is `inbound` or `outbound`
    attr_accessor :direction

    # The user-defined name for this rule. Names must be unique within the network ACL the rule resides in. If unspecified, the name will be a hyphenated list of randomly-selected words.
    attr_accessor :name

    # The protocol to enforce.
    attr_accessor :protocol

    # The source IP address or CIDR block.  The CIDR block `0.0.0.0/0` applies to all addresses.
    attr_accessor :source

    # The inclusive upper bound of TCP/UDP destination port range
    attr_accessor :destination_port_max

    # The inclusive lower bound of TCP/UDP destination port range
    attr_accessor :destination_port_min

    # The inclusive upper bound of TCP/UDP source port range
    attr_accessor :source_port_max

    # The inclusive lower bound of TCP/UDP source port range
    attr_accessor :source_port_min

    # The ICMP traffic code to allow. If unspecified, all codes are allowed. This can only be specified if type is also specified.
    attr_accessor :code

    # The ICMP traffic type to allow. If unspecified, all types are allowed by this rule.
    attr_accessor :type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'action' => :'action',
        :'destination' => :'destination',
        :'direction' => :'direction',
        :'name' => :'name',
        :'protocol' => :'protocol',
        :'source' => :'source',
        :'destination_port_max' => :'destination_port_max',
        :'destination_port_min' => :'destination_port_min',
        :'source_port_max' => :'source_port_max',
        :'source_port_min' => :'source_port_min',
        :'code' => :'code',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'action' => :'String',
        :'destination' => :'String',
        :'direction' => :'String',
        :'name' => :'String',
        :'protocol' => :'String',
        :'source' => :'String',
        :'destination_port_max' => :'Integer',
        :'destination_port_min' => :'Integer',
        :'source_port_max' => :'Integer',
        :'source_port_min' => :'Integer',
        :'code' => :'Integer',
        :'type' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in oneOf (OpenAPI v3)
    def self.openapi_one_of
      [
      :'NetworkACLRuleProtocolICMP',
      :'NetworkACLRuleProtocolTCPUDP',
      :'Object'
      ]
    end

    # discriminator's property name in OpenAPI v3
    def self.openapi_discriminator_name
      :'protocol'
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IbmCloudVpc::NetworkACLRulePrototypeNetworkACLContext` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IbmCloudVpc::NetworkACLRulePrototypeNetworkACLContext`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'action')
        self.action = attributes[:'action']
      end

      if attributes.key?(:'destination')
        self.destination = attributes[:'destination']
      end

      if attributes.key?(:'direction')
        self.direction = attributes[:'direction']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'protocol')
        self.protocol = attributes[:'protocol']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'destination_port_max')
        self.destination_port_max = attributes[:'destination_port_max']
      else
        self.destination_port_max = 65535
      end

      if attributes.key?(:'destination_port_min')
        self.destination_port_min = attributes[:'destination_port_min']
      else
        self.destination_port_min = 1
      end

      if attributes.key?(:'source_port_max')
        self.source_port_max = attributes[:'source_port_max']
      else
        self.source_port_max = 65335
      end

      if attributes.key?(:'source_port_min')
        self.source_port_min = attributes[:'source_port_min']
      else
        self.source_port_min = 1
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @action.nil?
        invalid_properties.push('invalid value for "action", action cannot be nil.')
      end

      if @destination.nil?
        invalid_properties.push('invalid value for "destination", destination cannot be nil.')
      end

      pattern = Regexp.new(/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))?$/)
      if @destination !~ pattern
        invalid_properties.push("invalid value for \"destination\", must conform to the pattern #{pattern}.")
      end

      if @direction.nil?
        invalid_properties.push('invalid value for "direction", direction cannot be nil.')
      end

      if !@name.nil? && @name.to_s.length > 63
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 63.')
      end

      if !@name.nil? && @name.to_s.length < 1
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 1.')
      end

      pattern = Regexp.new(/^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$/)
      if !@name.nil? && @name !~ pattern
        invalid_properties.push("invalid value for \"name\", must conform to the pattern #{pattern}.")
      end

      if @protocol.nil?
        invalid_properties.push('invalid value for "protocol", protocol cannot be nil.')
      end

      if @source.nil?
        invalid_properties.push('invalid value for "source", source cannot be nil.')
      end

      pattern = Regexp.new(/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))?$/)
      if @source !~ pattern
        invalid_properties.push("invalid value for \"source\", must conform to the pattern #{pattern}.")
      end

      if !@destination_port_max.nil? && @destination_port_max > 65535
        invalid_properties.push('invalid value for "destination_port_max", must be smaller than or equal to 65535.')
      end

      if !@destination_port_max.nil? && @destination_port_max < 1
        invalid_properties.push('invalid value for "destination_port_max", must be greater than or equal to 1.')
      end

      if !@destination_port_min.nil? && @destination_port_min > 65535
        invalid_properties.push('invalid value for "destination_port_min", must be smaller than or equal to 65535.')
      end

      if !@destination_port_min.nil? && @destination_port_min < 1
        invalid_properties.push('invalid value for "destination_port_min", must be greater than or equal to 1.')
      end

      if !@source_port_max.nil? && @source_port_max > 65535
        invalid_properties.push('invalid value for "source_port_max", must be smaller than or equal to 65535.')
      end

      if !@source_port_max.nil? && @source_port_max < 1
        invalid_properties.push('invalid value for "source_port_max", must be greater than or equal to 1.')
      end

      if !@source_port_min.nil? && @source_port_min > 65535
        invalid_properties.push('invalid value for "source_port_min", must be smaller than or equal to 65535.')
      end

      if !@source_port_min.nil? && @source_port_min < 1
        invalid_properties.push('invalid value for "source_port_min", must be greater than or equal to 1.')
      end

      if !@code.nil? && @code > 255
        invalid_properties.push('invalid value for "code", must be smaller than or equal to 255.')
      end

      if !@code.nil? && @code < 0
        invalid_properties.push('invalid value for "code", must be greater than or equal to 0.')
      end

      if !@type.nil? && @type > 254
        invalid_properties.push('invalid value for "type", must be smaller than or equal to 254.')
      end

      if !@type.nil? && @type < 0
        invalid_properties.push('invalid value for "type", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @action.nil?
      action_validator = EnumAttributeValidator.new('String', ["allow", "deny"])
      return false unless action_validator.valid?(@action)
      return false if @destination.nil?
      return false if @destination !~ Regexp.new(/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))?$/)
      return false if @direction.nil?
      direction_validator = EnumAttributeValidator.new('String', ["inbound", "outbound"])
      return false unless direction_validator.valid?(@direction)
      return false if !@name.nil? && @name.to_s.length > 63
      return false if !@name.nil? && @name.to_s.length < 1
      return false if !@name.nil? && @name !~ Regexp.new(/^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$/)
      return false if @protocol.nil?
      protocol_validator = EnumAttributeValidator.new('String', ["all", "icmp", "tcp", "udp"])
      return false unless protocol_validator.valid?(@protocol)
      return false if @source.nil?
      return false if @source !~ Regexp.new(/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))?$/)
      return false if !@destination_port_max.nil? && @destination_port_max > 65535
      return false if !@destination_port_max.nil? && @destination_port_max < 1
      return false if !@destination_port_min.nil? && @destination_port_min > 65535
      return false if !@destination_port_min.nil? && @destination_port_min < 1
      return false if !@source_port_max.nil? && @source_port_max > 65535
      return false if !@source_port_max.nil? && @source_port_max < 1
      return false if !@source_port_min.nil? && @source_port_min > 65535
      return false if !@source_port_min.nil? && @source_port_min < 1
      return false if !@code.nil? && @code > 255
      return false if !@code.nil? && @code < 0
      return false if !@type.nil? && @type > 254
      return false if !@type.nil? && @type < 0
      _one_of_found = false
      self.class.openapi_one_of.each do |_class|
        _one_of = IbmCloudVpc.const_get(_class).build_from_hash(self.to_hash)
        if _one_of.valid?
          if _one_of_found
            return false
          else
            _one_of_found = true
          end
        end
      end

      if !_one_of_found
        return false
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action Object to be assigned
    def action=(action)
      validator = EnumAttributeValidator.new('String', ["allow", "deny"])
      unless validator.valid?(action)
        fail ArgumentError, "invalid value for \"action\", must be one of #{validator.allowable_values}."
      end
      @action = action
    end

    # Custom attribute writer method with validation
    # @param [Object] destination Value to be assigned
    def destination=(destination)
      if destination.nil?
        fail ArgumentError, 'destination cannot be nil'
      end

      pattern = Regexp.new(/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))?$/)
      if destination !~ pattern
        fail ArgumentError, "invalid value for \"destination\", must conform to the pattern #{pattern}."
      end

      @destination = destination
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] direction Object to be assigned
    def direction=(direction)
      validator = EnumAttributeValidator.new('String', ["inbound", "outbound"])
      unless validator.valid?(direction)
        fail ArgumentError, "invalid value for \"direction\", must be one of #{validator.allowable_values}."
      end
      @direction = direction
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 63
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 63.'
      end

      if !name.nil? && name.to_s.length < 1
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$/)
      if !name.nil? && name !~ pattern
        fail ArgumentError, "invalid value for \"name\", must conform to the pattern #{pattern}."
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] protocol Object to be assigned
    def protocol=(protocol)
      validator = EnumAttributeValidator.new('String', ["all", "icmp", "tcp", "udp"])
      unless validator.valid?(protocol)
        fail ArgumentError, "invalid value for \"protocol\", must be one of #{validator.allowable_values}."
      end
      @protocol = protocol
    end

    # Custom attribute writer method with validation
    # @param [Object] source Value to be assigned
    def source=(source)
      if source.nil?
        fail ArgumentError, 'source cannot be nil'
      end

      pattern = Regexp.new(/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))?$/)
      if source !~ pattern
        fail ArgumentError, "invalid value for \"source\", must conform to the pattern #{pattern}."
      end

      @source = source
    end

    # Custom attribute writer method with validation
    # @param [Object] destination_port_max Value to be assigned
    def destination_port_max=(destination_port_max)
      if !destination_port_max.nil? && destination_port_max > 65535
        fail ArgumentError, 'invalid value for "destination_port_max", must be smaller than or equal to 65535.'
      end

      if !destination_port_max.nil? && destination_port_max < 1
        fail ArgumentError, 'invalid value for "destination_port_max", must be greater than or equal to 1.'
      end

      @destination_port_max = destination_port_max
    end

    # Custom attribute writer method with validation
    # @param [Object] destination_port_min Value to be assigned
    def destination_port_min=(destination_port_min)
      if !destination_port_min.nil? && destination_port_min > 65535
        fail ArgumentError, 'invalid value for "destination_port_min", must be smaller than or equal to 65535.'
      end

      if !destination_port_min.nil? && destination_port_min < 1
        fail ArgumentError, 'invalid value for "destination_port_min", must be greater than or equal to 1.'
      end

      @destination_port_min = destination_port_min
    end

    # Custom attribute writer method with validation
    # @param [Object] source_port_max Value to be assigned
    def source_port_max=(source_port_max)
      if !source_port_max.nil? && source_port_max > 65535
        fail ArgumentError, 'invalid value for "source_port_max", must be smaller than or equal to 65535.'
      end

      if !source_port_max.nil? && source_port_max < 1
        fail ArgumentError, 'invalid value for "source_port_max", must be greater than or equal to 1.'
      end

      @source_port_max = source_port_max
    end

    # Custom attribute writer method with validation
    # @param [Object] source_port_min Value to be assigned
    def source_port_min=(source_port_min)
      if !source_port_min.nil? && source_port_min > 65535
        fail ArgumentError, 'invalid value for "source_port_min", must be smaller than or equal to 65535.'
      end

      if !source_port_min.nil? && source_port_min < 1
        fail ArgumentError, 'invalid value for "source_port_min", must be greater than or equal to 1.'
      end

      @source_port_min = source_port_min
    end

    # Custom attribute writer method with validation
    # @param [Object] code Value to be assigned
    def code=(code)
      if !code.nil? && code > 255
        fail ArgumentError, 'invalid value for "code", must be smaller than or equal to 255.'
      end

      if !code.nil? && code < 0
        fail ArgumentError, 'invalid value for "code", must be greater than or equal to 0.'
      end

      @code = code
    end

    # Custom attribute writer method with validation
    # @param [Object] type Value to be assigned
    def type=(type)
      if !type.nil? && type > 254
        fail ArgumentError, 'invalid value for "type", must be smaller than or equal to 254.'
      end

      if !type.nil? && type < 0
        fail ArgumentError, 'invalid value for "type", must be greater than or equal to 0.'
      end

      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          action == o.action &&
          destination == o.destination &&
          direction == o.direction &&
          name == o.name &&
          protocol == o.protocol &&
          source == o.source &&
          destination_port_max == o.destination_port_max &&
          destination_port_min == o.destination_port_min &&
          source_port_max == o.source_port_max &&
          source_port_min == o.source_port_min &&
          code == o.code &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [action, destination, direction, name, protocol, source, destination_port_max, destination_port_min, source_port_max, source_port_min, code, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        IbmCloudVpc.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end

=begin
#Virtual Private Cloud API

#The IBM Cloud Virtual Private Cloud (VPC) API can be used to programmatically provision and manage infrastructure resources, including virtual server instances, subnets, volumes, and load balancers.

The version of the OpenAPI document: 2020-09-08

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-beta2

=end

require 'cgi'

module IbmCloudVpc
  class ImagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an image
    # This request creates a new image from an image prototype object. The prototype object is structured in the same way as a retrieved image, and contains the information necessary to create the new image. A URL to the image file on object storage must be provided.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param image_prototype [ImagePrototype] The image prototype object
    # @param [Hash] opts the optional parameters
    # @return [Image]
    def create_image(version, generation, image_prototype, opts = {})
      data, _status_code, _headers = create_image_with_http_info(version, generation, image_prototype, opts)
      data
    end

    # Create an image
    # This request creates a new image from an image prototype object. The prototype object is structured in the same way as a retrieved image, and contains the information necessary to create the new image. A URL to the image file on object storage must be provided.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param image_prototype [ImagePrototype] The image prototype object
    # @param [Hash] opts the optional parameters
    # @return [Array<(Image, Integer, Hash)>] Image data, response status code and response headers
    def create_image_with_http_info(version, generation, image_prototype, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.create_image ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ImagesApi.create_image"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling ImagesApi.create_image, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling ImagesApi.create_image"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'image_prototype' is set
      if @api_client.config.client_side_validation && image_prototype.nil?
        fail ArgumentError, "Missing the required parameter 'image_prototype' when calling ImagesApi.create_image"
      end
      # resource path
      local_var_path = '/images'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_prototype) 

      # return_type
      return_type = opts[:return_type] || 'Image' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#create_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete specified image
    # This request deletes an image. This operation cannot be reversed. System-provided images are not allowed to be deleted. An image with a `status` of `pending`, `tentative`, or `deleting` cannot be deleted.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The image identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_image(version, generation, id, opts = {})
      delete_image_with_http_info(version, generation, id, opts)
      nil
    end

    # Delete specified image
    # This request deletes an image. This operation cannot be reversed. System-provided images are not allowed to be deleted. An image with a &#x60;status&#x60; of &#x60;pending&#x60;, &#x60;tentative&#x60;, or &#x60;deleting&#x60; cannot be deleted.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The image identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_image_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.delete_image ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ImagesApi.delete_image"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling ImagesApi.delete_image, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling ImagesApi.delete_image"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ImagesApi.delete_image"
      end
      # resource path
      local_var_path = '/images/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#delete_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the specified image
    # This request retrieves a single image specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The image identifier
    # @param [Hash] opts the optional parameters
    # @return [Image]
    def get_image(version, generation, id, opts = {})
      data, _status_code, _headers = get_image_with_http_info(version, generation, id, opts)
      data
    end

    # Retrieve the specified image
    # This request retrieves a single image specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The image identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Image, Integer, Hash)>] Image data, response status code and response headers
    def get_image_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.get_image ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ImagesApi.get_image"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling ImagesApi.get_image, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling ImagesApi.get_image"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ImagesApi.get_image"
      end
      # resource path
      local_var_path = '/images/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Image' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#get_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves an operating system
    # This request retrieves a single operating system specified by the name in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param name [String] The operating system name
    # @param [Hash] opts the optional parameters
    # @return [OperatingSystem]
    def get_operating_system(version, generation, name, opts = {})
      data, _status_code, _headers = get_operating_system_with_http_info(version, generation, name, opts)
      data
    end

    # Retrieves an operating system
    # This request retrieves a single operating system specified by the name in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param name [String] The operating system name
    # @param [Hash] opts the optional parameters
    # @return [Array<(OperatingSystem, Integer, Hash)>] OperatingSystem data, response status code and response headers
    def get_operating_system_with_http_info(version, generation, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.get_operating_system ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ImagesApi.get_operating_system"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling ImagesApi.get_operating_system, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling ImagesApi.get_operating_system"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagesApi.get_operating_system"
      end
      # resource path
      local_var_path = '/operating_systems/{name}'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'OperatingSystem' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#get_operating_system\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all images
    # This request lists all provisionable images available in the region. An image provides source data for a volume. Images are either system-provided, or created from another source, such as importing from object storage.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page (default to 50)
    # @option opts [String] :resource_group_id Filters the collection to resources within one of the resource groups identified in a comma-separated list of resource group identifiers
    # @option opts [String] :name Filters the collection to resources with the exact specified name
    # @option opts [String] :visibility Filters the collection to images with the specified &#x60;visibility&#x60;
    # @return [ImageCollection]
    def list_images(version, generation, opts = {})
      data, _status_code, _headers = list_images_with_http_info(version, generation, opts)
      data
    end

    # List all images
    # This request lists all provisionable images available in the region. An image provides source data for a volume. Images are either system-provided, or created from another source, such as importing from object storage.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page
    # @option opts [String] :resource_group_id Filters the collection to resources within one of the resource groups identified in a comma-separated list of resource group identifiers
    # @option opts [String] :name Filters the collection to resources with the exact specified name
    # @option opts [String] :visibility Filters the collection to images with the specified &#x60;visibility&#x60;
    # @return [Array<(ImageCollection, Integer, Hash)>] ImageCollection data, response status code and response headers
    def list_images_with_http_info(version, generation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.list_images ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ImagesApi.list_images"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling ImagesApi.list_images, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling ImagesApi.list_images"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ImagesApi.list_images, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ImagesApi.list_images, must be greater than or equal to 1.'
      end

      allowable_values = ["private", "public"]
      if @api_client.config.client_side_validation && opts[:'visibility'] && !allowable_values.include?(opts[:'visibility'])
        fail ArgumentError, "invalid value for \"visibility\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/images'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'resource_group.id'] = opts[:'resource_group_id'] if !opts[:'resource_group_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'visibility'] = opts[:'visibility'] if !opts[:'visibility'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ImageCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#list_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all operating systems
    # This request retrieves all operating systems.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page (default to 50)
    # @return [OperatingSystemCollection]
    def list_operating_systems(version, generation, opts = {})
      data, _status_code, _headers = list_operating_systems_with_http_info(version, generation, opts)
      data
    end

    # Retrieves all operating systems
    # This request retrieves all operating systems.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page
    # @return [Array<(OperatingSystemCollection, Integer, Hash)>] OperatingSystemCollection data, response status code and response headers
    def list_operating_systems_with_http_info(version, generation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.list_operating_systems ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ImagesApi.list_operating_systems"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling ImagesApi.list_operating_systems, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling ImagesApi.list_operating_systems"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ImagesApi.list_operating_systems, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ImagesApi.list_operating_systems, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/operating_systems'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'OperatingSystemCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#list_operating_systems\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update specified image
    # This request updates an image with the information in a provided image patch. The image patch object is structured in the same way as a retrieved image and contains only the information to be updated. System-provided images are not allowed to be updated. An image with a `status` of `deleting` cannot be updated.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The image identifier
    # @param image_patch [ImagePatch] The image patch
    # @param [Hash] opts the optional parameters
    # @return [Image]
    def update_image(version, generation, id, image_patch, opts = {})
      data, _status_code, _headers = update_image_with_http_info(version, generation, id, image_patch, opts)
      data
    end

    # Update specified image
    # This request updates an image with the information in a provided image patch. The image patch object is structured in the same way as a retrieved image and contains only the information to be updated. System-provided images are not allowed to be updated. An image with a &#x60;status&#x60; of &#x60;deleting&#x60; cannot be updated.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The image identifier
    # @param image_patch [ImagePatch] The image patch
    # @param [Hash] opts the optional parameters
    # @return [Array<(Image, Integer, Hash)>] Image data, response status code and response headers
    def update_image_with_http_info(version, generation, id, image_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.update_image ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ImagesApi.update_image"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling ImagesApi.update_image, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling ImagesApi.update_image"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ImagesApi.update_image"
      end
      # verify the required parameter 'image_patch' is set
      if @api_client.config.client_side_validation && image_patch.nil?
        fail ArgumentError, "Missing the required parameter 'image_patch' when calling ImagesApi.update_image"
      end
      # resource path
      local_var_path = '/images/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_patch) 

      # return_type
      return_type = opts[:return_type] || 'Image' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#update_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

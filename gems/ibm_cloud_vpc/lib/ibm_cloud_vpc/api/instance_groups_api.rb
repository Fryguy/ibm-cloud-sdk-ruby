=begin
#Virtual Private Cloud API

#The IBM Cloud Virtual Private Cloud (VPC) API can be used to programmatically provision and manage infrastructure resources, including virtual server instances, subnets, volumes, and load balancers.

The version of the OpenAPI document: 2020-09-08

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-beta2

=end

require 'cgi'

module IbmCloudVpc
  class InstanceGroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an instance group
    # This request creates a new instance group
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_prototype [InstanceGroupPrototype] The instance group prototype object
    # @param [Hash] opts the optional parameters
    # @return [InstanceGroup]
    def create_instance_group(version, generation, instance_group_prototype, opts = {})
      data, _status_code, _headers = create_instance_group_with_http_info(version, generation, instance_group_prototype, opts)
      data
    end

    # Create an instance group
    # This request creates a new instance group
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_prototype [InstanceGroupPrototype] The instance group prototype object
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceGroup, Integer, Hash)>] InstanceGroup data, response status code and response headers
    def create_instance_group_with_http_info(version, generation, instance_group_prototype, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.create_instance_group ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.create_instance_group"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.create_instance_group, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.create_instance_group"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_prototype' is set
      if @api_client.config.client_side_validation && instance_group_prototype.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_prototype' when calling InstanceGroupsApi.create_instance_group"
      end
      # resource path
      local_var_path = '/instance_groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(instance_group_prototype) 

      # return_type
      return_type = opts[:return_type] || 'InstanceGroup' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#create_instance_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an instance group manager
    # This request creates a new instance group manager
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param instance_group_manager_prototype [InstanceGroupManagerPrototype] The instance group manager prototype object
    # @param [Hash] opts the optional parameters
    # @return [InstanceGroupManager]
    def create_instance_group_manager(version, generation, instance_group_id, instance_group_manager_prototype, opts = {})
      data, _status_code, _headers = create_instance_group_manager_with_http_info(version, generation, instance_group_id, instance_group_manager_prototype, opts)
      data
    end

    # Create an instance group manager
    # This request creates a new instance group manager
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param instance_group_manager_prototype [InstanceGroupManagerPrototype] The instance group manager prototype object
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceGroupManager, Integer, Hash)>] InstanceGroupManager data, response status code and response headers
    def create_instance_group_manager_with_http_info(version, generation, instance_group_id, instance_group_manager_prototype, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.create_instance_group_manager ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.create_instance_group_manager"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.create_instance_group_manager, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.create_instance_group_manager"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_id' is set
      if @api_client.config.client_side_validation && instance_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_id' when calling InstanceGroupsApi.create_instance_group_manager"
      end
      # verify the required parameter 'instance_group_manager_prototype' is set
      if @api_client.config.client_side_validation && instance_group_manager_prototype.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_manager_prototype' when calling InstanceGroupsApi.create_instance_group_manager"
      end
      # resource path
      local_var_path = '/instance_groups/{instance_group_id}/managers'.sub('{' + 'instance_group_id' + '}', CGI.escape(instance_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(instance_group_manager_prototype) 

      # return_type
      return_type = opts[:return_type] || 'InstanceGroupManager' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#create_instance_group_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an instance group manager policy
    # This request creates a new instance group manager policy
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param instance_group_manager_id [String] The instance group manager identifier
    # @param instance_group_manager_policy_prototype [InstanceGroupManagerPolicyPrototype] The instance group manager policy prototype object
    # @param [Hash] opts the optional parameters
    # @return [InstanceGroupManagerPolicy]
    def create_instance_group_manager_policy(version, generation, instance_group_id, instance_group_manager_id, instance_group_manager_policy_prototype, opts = {})
      data, _status_code, _headers = create_instance_group_manager_policy_with_http_info(version, generation, instance_group_id, instance_group_manager_id, instance_group_manager_policy_prototype, opts)
      data
    end

    # Create an instance group manager policy
    # This request creates a new instance group manager policy
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param instance_group_manager_id [String] The instance group manager identifier
    # @param instance_group_manager_policy_prototype [InstanceGroupManagerPolicyPrototype] The instance group manager policy prototype object
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceGroupManagerPolicy, Integer, Hash)>] InstanceGroupManagerPolicy data, response status code and response headers
    def create_instance_group_manager_policy_with_http_info(version, generation, instance_group_id, instance_group_manager_id, instance_group_manager_policy_prototype, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.create_instance_group_manager_policy ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.create_instance_group_manager_policy"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.create_instance_group_manager_policy, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.create_instance_group_manager_policy"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_id' is set
      if @api_client.config.client_side_validation && instance_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_id' when calling InstanceGroupsApi.create_instance_group_manager_policy"
      end
      # verify the required parameter 'instance_group_manager_id' is set
      if @api_client.config.client_side_validation && instance_group_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_manager_id' when calling InstanceGroupsApi.create_instance_group_manager_policy"
      end
      # verify the required parameter 'instance_group_manager_policy_prototype' is set
      if @api_client.config.client_side_validation && instance_group_manager_policy_prototype.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_manager_policy_prototype' when calling InstanceGroupsApi.create_instance_group_manager_policy"
      end
      # resource path
      local_var_path = '/instance_groups/{instance_group_id}/managers/{instance_group_manager_id}/policies'.sub('{' + 'instance_group_id' + '}', CGI.escape(instance_group_id.to_s)).sub('{' + 'instance_group_manager_id' + '}', CGI.escape(instance_group_manager_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(instance_group_manager_policy_prototype) 

      # return_type
      return_type = opts[:return_type] || 'InstanceGroupManagerPolicy' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#create_instance_group_manager_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete specified instance group
    # This request deletes an instance group. This operation cannot be reversed. Any instances associated with the group will be deleted.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The instance group identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_instance_group(version, generation, id, opts = {})
      delete_instance_group_with_http_info(version, generation, id, opts)
      nil
    end

    # Delete specified instance group
    # This request deletes an instance group. This operation cannot be reversed. Any instances associated with the group will be deleted.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The instance group identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_instance_group_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.delete_instance_group ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.delete_instance_group"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.delete_instance_group, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.delete_instance_group"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstanceGroupsApi.delete_instance_group"
      end
      # resource path
      local_var_path = '/instance_groups/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#delete_instance_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete specified instance group load balancer
    # This request unbinds the instance group from the load balancer pool, and deletes the load balancer pool members.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_instance_group_load_balancer(version, generation, instance_group_id, opts = {})
      delete_instance_group_load_balancer_with_http_info(version, generation, instance_group_id, opts)
      nil
    end

    # Delete specified instance group load balancer
    # This request unbinds the instance group from the load balancer pool, and deletes the load balancer pool members.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_instance_group_load_balancer_with_http_info(version, generation, instance_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.delete_instance_group_load_balancer ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.delete_instance_group_load_balancer"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.delete_instance_group_load_balancer, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.delete_instance_group_load_balancer"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_id' is set
      if @api_client.config.client_side_validation && instance_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_id' when calling InstanceGroupsApi.delete_instance_group_load_balancer"
      end
      # resource path
      local_var_path = '/instance_groups/{instance_group_id}/load_balancer'.sub('{' + 'instance_group_id' + '}', CGI.escape(instance_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#delete_instance_group_load_balancer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete specified instance group manager
    # This request deletes an instance group manager. This operation cannot be reversed.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param id [String] The instance group manager identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_instance_group_manager(version, generation, instance_group_id, id, opts = {})
      delete_instance_group_manager_with_http_info(version, generation, instance_group_id, id, opts)
      nil
    end

    # Delete specified instance group manager
    # This request deletes an instance group manager. This operation cannot be reversed.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param id [String] The instance group manager identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_instance_group_manager_with_http_info(version, generation, instance_group_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.delete_instance_group_manager ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.delete_instance_group_manager"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.delete_instance_group_manager, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.delete_instance_group_manager"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_id' is set
      if @api_client.config.client_side_validation && instance_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_id' when calling InstanceGroupsApi.delete_instance_group_manager"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstanceGroupsApi.delete_instance_group_manager"
      end
      # resource path
      local_var_path = '/instance_groups/{instance_group_id}/managers/{id}'.sub('{' + 'instance_group_id' + '}', CGI.escape(instance_group_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#delete_instance_group_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete specified instance group manager policy
    # This request deletes an instance group manager policy. This operation cannot be reversed.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param instance_group_manager_id [String] The instance group manager identifier
    # @param id [String] The instance group manager policy identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_instance_group_manager_policy(version, generation, instance_group_id, instance_group_manager_id, id, opts = {})
      delete_instance_group_manager_policy_with_http_info(version, generation, instance_group_id, instance_group_manager_id, id, opts)
      nil
    end

    # Delete specified instance group manager policy
    # This request deletes an instance group manager policy. This operation cannot be reversed.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param instance_group_manager_id [String] The instance group manager identifier
    # @param id [String] The instance group manager policy identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_instance_group_manager_policy_with_http_info(version, generation, instance_group_id, instance_group_manager_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.delete_instance_group_manager_policy ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.delete_instance_group_manager_policy"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.delete_instance_group_manager_policy, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.delete_instance_group_manager_policy"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_id' is set
      if @api_client.config.client_side_validation && instance_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_id' when calling InstanceGroupsApi.delete_instance_group_manager_policy"
      end
      # verify the required parameter 'instance_group_manager_id' is set
      if @api_client.config.client_side_validation && instance_group_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_manager_id' when calling InstanceGroupsApi.delete_instance_group_manager_policy"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstanceGroupsApi.delete_instance_group_manager_policy"
      end
      # resource path
      local_var_path = '/instance_groups/{instance_group_id}/managers/{instance_group_manager_id}/policies/{id}'.sub('{' + 'instance_group_id' + '}', CGI.escape(instance_group_id.to_s)).sub('{' + 'instance_group_manager_id' + '}', CGI.escape(instance_group_manager_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#delete_instance_group_manager_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete specified instance group membership
    # This request deletes a memberships of an instance group. This operation cannot be reversed. reversed. If the membership has `delete_instance_on_membership_delete` set to `true`, the instance will also be deleted.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param id [String] The instance group membership identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_instance_group_membership(version, generation, instance_group_id, id, opts = {})
      delete_instance_group_membership_with_http_info(version, generation, instance_group_id, id, opts)
      nil
    end

    # Delete specified instance group membership
    # This request deletes a memberships of an instance group. This operation cannot be reversed. reversed. If the membership has &#x60;delete_instance_on_membership_delete&#x60; set to &#x60;true&#x60;, the instance will also be deleted.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param id [String] The instance group membership identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_instance_group_membership_with_http_info(version, generation, instance_group_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.delete_instance_group_membership ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.delete_instance_group_membership"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.delete_instance_group_membership, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.delete_instance_group_membership"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_id' is set
      if @api_client.config.client_side_validation && instance_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_id' when calling InstanceGroupsApi.delete_instance_group_membership"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstanceGroupsApi.delete_instance_group_membership"
      end
      # resource path
      local_var_path = '/instance_groups/{instance_group_id}/memberships/{id}'.sub('{' + 'instance_group_id' + '}', CGI.escape(instance_group_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#delete_instance_group_membership\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete all memberships from the instance group
    # This request deletes all memberships of an instance group. This operation cannot be reversed. reversed. Any memberships that have `delete_instance_on_membership_delete` set to `true` will also have their instances deleted.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_instance_group_memberships(version, generation, instance_group_id, opts = {})
      delete_instance_group_memberships_with_http_info(version, generation, instance_group_id, opts)
      nil
    end

    # Delete all memberships from the instance group
    # This request deletes all memberships of an instance group. This operation cannot be reversed. reversed. Any memberships that have &#x60;delete_instance_on_membership_delete&#x60; set to &#x60;true&#x60; will also have their instances deleted.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_instance_group_memberships_with_http_info(version, generation, instance_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.delete_instance_group_memberships ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.delete_instance_group_memberships"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.delete_instance_group_memberships, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.delete_instance_group_memberships"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_id' is set
      if @api_client.config.client_side_validation && instance_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_id' when calling InstanceGroupsApi.delete_instance_group_memberships"
      end
      # resource path
      local_var_path = '/instance_groups/{instance_group_id}/memberships'.sub('{' + 'instance_group_id' + '}', CGI.escape(instance_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#delete_instance_group_memberships\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve specified instance group
    # This request retrieves a single instance group specified by identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The instance group identifier
    # @param [Hash] opts the optional parameters
    # @return [InstanceGroup]
    def get_instance_group(version, generation, id, opts = {})
      data, _status_code, _headers = get_instance_group_with_http_info(version, generation, id, opts)
      data
    end

    # Retrieve specified instance group
    # This request retrieves a single instance group specified by identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The instance group identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceGroup, Integer, Hash)>] InstanceGroup data, response status code and response headers
    def get_instance_group_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.get_instance_group ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.get_instance_group"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.get_instance_group, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.get_instance_group"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstanceGroupsApi.get_instance_group"
      end
      # resource path
      local_var_path = '/instance_groups/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InstanceGroup' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#get_instance_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve specified instance group
    # This request retrieves a single instance group manager specified by identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param id [String] The instance group manager identifier
    # @param [Hash] opts the optional parameters
    # @return [InstanceGroupManager]
    def get_instance_group_manager(version, generation, instance_group_id, id, opts = {})
      data, _status_code, _headers = get_instance_group_manager_with_http_info(version, generation, instance_group_id, id, opts)
      data
    end

    # Retrieve specified instance group
    # This request retrieves a single instance group manager specified by identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param id [String] The instance group manager identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceGroupManager, Integer, Hash)>] InstanceGroupManager data, response status code and response headers
    def get_instance_group_manager_with_http_info(version, generation, instance_group_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.get_instance_group_manager ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.get_instance_group_manager"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.get_instance_group_manager, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.get_instance_group_manager"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_id' is set
      if @api_client.config.client_side_validation && instance_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_id' when calling InstanceGroupsApi.get_instance_group_manager"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstanceGroupsApi.get_instance_group_manager"
      end
      # resource path
      local_var_path = '/instance_groups/{instance_group_id}/managers/{id}'.sub('{' + 'instance_group_id' + '}', CGI.escape(instance_group_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InstanceGroupManager' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#get_instance_group_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve specified instance group manager policy
    # This request retrieves a single instance group manager policy specified by identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param instance_group_manager_id [String] The instance group manager identifier
    # @param id [String] The instance group manager policy identifier
    # @param [Hash] opts the optional parameters
    # @return [InstanceGroupManagerPolicy]
    def get_instance_group_manager_policy(version, generation, instance_group_id, instance_group_manager_id, id, opts = {})
      data, _status_code, _headers = get_instance_group_manager_policy_with_http_info(version, generation, instance_group_id, instance_group_manager_id, id, opts)
      data
    end

    # Retrieve specified instance group manager policy
    # This request retrieves a single instance group manager policy specified by identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param instance_group_manager_id [String] The instance group manager identifier
    # @param id [String] The instance group manager policy identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceGroupManagerPolicy, Integer, Hash)>] InstanceGroupManagerPolicy data, response status code and response headers
    def get_instance_group_manager_policy_with_http_info(version, generation, instance_group_id, instance_group_manager_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.get_instance_group_manager_policy ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.get_instance_group_manager_policy"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.get_instance_group_manager_policy, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.get_instance_group_manager_policy"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_id' is set
      if @api_client.config.client_side_validation && instance_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_id' when calling InstanceGroupsApi.get_instance_group_manager_policy"
      end
      # verify the required parameter 'instance_group_manager_id' is set
      if @api_client.config.client_side_validation && instance_group_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_manager_id' when calling InstanceGroupsApi.get_instance_group_manager_policy"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstanceGroupsApi.get_instance_group_manager_policy"
      end
      # resource path
      local_var_path = '/instance_groups/{instance_group_id}/managers/{instance_group_manager_id}/policies/{id}'.sub('{' + 'instance_group_id' + '}', CGI.escape(instance_group_id.to_s)).sub('{' + 'instance_group_manager_id' + '}', CGI.escape(instance_group_manager_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InstanceGroupManagerPolicy' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#get_instance_group_manager_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve specified instance group membership
    # This request retrieves a single instance group membership specified by identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param id [String] The instance group membership identifier
    # @param [Hash] opts the optional parameters
    # @return [InstanceGroupMembership]
    def get_instance_group_membership(version, generation, instance_group_id, id, opts = {})
      data, _status_code, _headers = get_instance_group_membership_with_http_info(version, generation, instance_group_id, id, opts)
      data
    end

    # Retrieve specified instance group membership
    # This request retrieves a single instance group membership specified by identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param id [String] The instance group membership identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceGroupMembership, Integer, Hash)>] InstanceGroupMembership data, response status code and response headers
    def get_instance_group_membership_with_http_info(version, generation, instance_group_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.get_instance_group_membership ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.get_instance_group_membership"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.get_instance_group_membership, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.get_instance_group_membership"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_id' is set
      if @api_client.config.client_side_validation && instance_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_id' when calling InstanceGroupsApi.get_instance_group_membership"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstanceGroupsApi.get_instance_group_membership"
      end
      # resource path
      local_var_path = '/instance_groups/{instance_group_id}/memberships/{id}'.sub('{' + 'instance_group_id' + '}', CGI.escape(instance_group_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InstanceGroupMembership' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#get_instance_group_membership\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all policies for an instance group manager
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param instance_group_manager_id [String] The instance group manager identifier
    # @param [Hash] opts the optional parameters
    # @return [InstanceGroupManagerPolicyCollection]
    def list_instance_group_manager_policies(version, generation, instance_group_id, instance_group_manager_id, opts = {})
      data, _status_code, _headers = list_instance_group_manager_policies_with_http_info(version, generation, instance_group_id, instance_group_manager_id, opts)
      data
    end

    # List all policies for an instance group manager
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param instance_group_manager_id [String] The instance group manager identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceGroupManagerPolicyCollection, Integer, Hash)>] InstanceGroupManagerPolicyCollection data, response status code and response headers
    def list_instance_group_manager_policies_with_http_info(version, generation, instance_group_id, instance_group_manager_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.list_instance_group_manager_policies ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.list_instance_group_manager_policies"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.list_instance_group_manager_policies, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.list_instance_group_manager_policies"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_id' is set
      if @api_client.config.client_side_validation && instance_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_id' when calling InstanceGroupsApi.list_instance_group_manager_policies"
      end
      # verify the required parameter 'instance_group_manager_id' is set
      if @api_client.config.client_side_validation && instance_group_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_manager_id' when calling InstanceGroupsApi.list_instance_group_manager_policies"
      end
      # resource path
      local_var_path = '/instance_groups/{instance_group_id}/managers/{instance_group_manager_id}/policies'.sub('{' + 'instance_group_id' + '}', CGI.escape(instance_group_id.to_s)).sub('{' + 'instance_group_manager_id' + '}', CGI.escape(instance_group_manager_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InstanceGroupManagerPolicyCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#list_instance_group_manager_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all managers for an instance group
    # This request retrieves instance group managers
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param [Hash] opts the optional parameters
    # @return [InstanceGroupManagerCollection]
    def list_instance_group_managers(version, generation, instance_group_id, opts = {})
      data, _status_code, _headers = list_instance_group_managers_with_http_info(version, generation, instance_group_id, opts)
      data
    end

    # List all managers for an instance group
    # This request retrieves instance group managers
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceGroupManagerCollection, Integer, Hash)>] InstanceGroupManagerCollection data, response status code and response headers
    def list_instance_group_managers_with_http_info(version, generation, instance_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.list_instance_group_managers ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.list_instance_group_managers"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.list_instance_group_managers, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.list_instance_group_managers"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_id' is set
      if @api_client.config.client_side_validation && instance_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_id' when calling InstanceGroupsApi.list_instance_group_managers"
      end
      # resource path
      local_var_path = '/instance_groups/{instance_group_id}/managers'.sub('{' + 'instance_group_id' + '}', CGI.escape(instance_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InstanceGroupManagerCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#list_instance_group_managers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all memberships for the instance group
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param [Hash] opts the optional parameters
    # @return [InstanceGroupMembershipCollection]
    def list_instance_group_memberships(version, generation, instance_group_id, opts = {})
      data, _status_code, _headers = list_instance_group_memberships_with_http_info(version, generation, instance_group_id, opts)
      data
    end

    # List all memberships for the instance group
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceGroupMembershipCollection, Integer, Hash)>] InstanceGroupMembershipCollection data, response status code and response headers
    def list_instance_group_memberships_with_http_info(version, generation, instance_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.list_instance_group_memberships ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.list_instance_group_memberships"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.list_instance_group_memberships, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.list_instance_group_memberships"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_id' is set
      if @api_client.config.client_side_validation && instance_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_id' when calling InstanceGroupsApi.list_instance_group_memberships"
      end
      # resource path
      local_var_path = '/instance_groups/{instance_group_id}/memberships'.sub('{' + 'instance_group_id' + '}', CGI.escape(instance_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InstanceGroupMembershipCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#list_instance_group_memberships\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all instance groups
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page (default to 50)
    # @return [InstanceGroupCollection]
    def list_instance_groups(version, generation, opts = {})
      data, _status_code, _headers = list_instance_groups_with_http_info(version, generation, opts)
      data
    end

    # List all instance groups
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page
    # @return [Array<(InstanceGroupCollection, Integer, Hash)>] InstanceGroupCollection data, response status code and response headers
    def list_instance_groups_with_http_info(version, generation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.list_instance_groups ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.list_instance_groups"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.list_instance_groups, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.list_instance_groups"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling InstanceGroupsApi.list_instance_groups, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling InstanceGroupsApi.list_instance_groups, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/instance_groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InstanceGroupCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#list_instance_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update specified instance group
    # This request updates an instance group with the information provided instance group patch. The instance group patch object is structured in the same way as a retrieved instance group and contains only the information to be updated.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The instance group identifier
    # @param instance_group_patch [InstanceGroupPatch] The instance group patch
    # @param [Hash] opts the optional parameters
    # @return [InstanceGroup]
    def update_instance_group(version, generation, id, instance_group_patch, opts = {})
      data, _status_code, _headers = update_instance_group_with_http_info(version, generation, id, instance_group_patch, opts)
      data
    end

    # Update specified instance group
    # This request updates an instance group with the information provided instance group patch. The instance group patch object is structured in the same way as a retrieved instance group and contains only the information to be updated.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The instance group identifier
    # @param instance_group_patch [InstanceGroupPatch] The instance group patch
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceGroup, Integer, Hash)>] InstanceGroup data, response status code and response headers
    def update_instance_group_with_http_info(version, generation, id, instance_group_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.update_instance_group ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.update_instance_group"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.update_instance_group, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.update_instance_group"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstanceGroupsApi.update_instance_group"
      end
      # verify the required parameter 'instance_group_patch' is set
      if @api_client.config.client_side_validation && instance_group_patch.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_patch' when calling InstanceGroupsApi.update_instance_group"
      end
      # resource path
      local_var_path = '/instance_groups/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(instance_group_patch) 

      # return_type
      return_type = opts[:return_type] || 'InstanceGroup' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#update_instance_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update specified instance group manager
    # This request updates an instance group manager with the information provided instance group manager patch.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param id [String] The instance group manager identifier
    # @param instance_group_manager_patch [InstanceGroupManagerPatch] The instance group manager patch
    # @param [Hash] opts the optional parameters
    # @return [InstanceGroupManager]
    def update_instance_group_manager(version, generation, instance_group_id, id, instance_group_manager_patch, opts = {})
      data, _status_code, _headers = update_instance_group_manager_with_http_info(version, generation, instance_group_id, id, instance_group_manager_patch, opts)
      data
    end

    # Update specified instance group manager
    # This request updates an instance group manager with the information provided instance group manager patch.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param id [String] The instance group manager identifier
    # @param instance_group_manager_patch [InstanceGroupManagerPatch] The instance group manager patch
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceGroupManager, Integer, Hash)>] InstanceGroupManager data, response status code and response headers
    def update_instance_group_manager_with_http_info(version, generation, instance_group_id, id, instance_group_manager_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.update_instance_group_manager ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.update_instance_group_manager"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.update_instance_group_manager, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.update_instance_group_manager"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_id' is set
      if @api_client.config.client_side_validation && instance_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_id' when calling InstanceGroupsApi.update_instance_group_manager"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstanceGroupsApi.update_instance_group_manager"
      end
      # verify the required parameter 'instance_group_manager_patch' is set
      if @api_client.config.client_side_validation && instance_group_manager_patch.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_manager_patch' when calling InstanceGroupsApi.update_instance_group_manager"
      end
      # resource path
      local_var_path = '/instance_groups/{instance_group_id}/managers/{id}'.sub('{' + 'instance_group_id' + '}', CGI.escape(instance_group_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(instance_group_manager_patch) 

      # return_type
      return_type = opts[:return_type] || 'InstanceGroupManager' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#update_instance_group_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update specified instance group manager policy
    # This request updates an instance group manager policy.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param instance_group_manager_id [String] The instance group manager identifier
    # @param id [String] The instance group manager policy identifier
    # @param instance_group_manager_policy_patch [InstanceGroupManagerPolicyPatch] The instance group manager policy patch
    # @param [Hash] opts the optional parameters
    # @return [InstanceGroupManagerPolicy]
    def update_instance_group_manager_policy(version, generation, instance_group_id, instance_group_manager_id, id, instance_group_manager_policy_patch, opts = {})
      data, _status_code, _headers = update_instance_group_manager_policy_with_http_info(version, generation, instance_group_id, instance_group_manager_id, id, instance_group_manager_policy_patch, opts)
      data
    end

    # Update specified instance group manager policy
    # This request updates an instance group manager policy.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param instance_group_manager_id [String] The instance group manager identifier
    # @param id [String] The instance group manager policy identifier
    # @param instance_group_manager_policy_patch [InstanceGroupManagerPolicyPatch] The instance group manager policy patch
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceGroupManagerPolicy, Integer, Hash)>] InstanceGroupManagerPolicy data, response status code and response headers
    def update_instance_group_manager_policy_with_http_info(version, generation, instance_group_id, instance_group_manager_id, id, instance_group_manager_policy_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.update_instance_group_manager_policy ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.update_instance_group_manager_policy"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.update_instance_group_manager_policy, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.update_instance_group_manager_policy"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_id' is set
      if @api_client.config.client_side_validation && instance_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_id' when calling InstanceGroupsApi.update_instance_group_manager_policy"
      end
      # verify the required parameter 'instance_group_manager_id' is set
      if @api_client.config.client_side_validation && instance_group_manager_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_manager_id' when calling InstanceGroupsApi.update_instance_group_manager_policy"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstanceGroupsApi.update_instance_group_manager_policy"
      end
      # verify the required parameter 'instance_group_manager_policy_patch' is set
      if @api_client.config.client_side_validation && instance_group_manager_policy_patch.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_manager_policy_patch' when calling InstanceGroupsApi.update_instance_group_manager_policy"
      end
      # resource path
      local_var_path = '/instance_groups/{instance_group_id}/managers/{instance_group_manager_id}/policies/{id}'.sub('{' + 'instance_group_id' + '}', CGI.escape(instance_group_id.to_s)).sub('{' + 'instance_group_manager_id' + '}', CGI.escape(instance_group_manager_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(instance_group_manager_policy_patch) 

      # return_type
      return_type = opts[:return_type] || 'InstanceGroupManagerPolicy' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#update_instance_group_manager_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update specified instance group membership
    # This request updates an instance group membership with the information provided instance group membership patch.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param id [String] The instance group membership identifier
    # @param instance_group_membership_patch [InstanceGroupMembershipPatch] The instance group membership patch
    # @param [Hash] opts the optional parameters
    # @return [InstanceGroupMembership]
    def update_instance_group_membership(version, generation, instance_group_id, id, instance_group_membership_patch, opts = {})
      data, _status_code, _headers = update_instance_group_membership_with_http_info(version, generation, instance_group_id, id, instance_group_membership_patch, opts)
      data
    end

    # Update specified instance group membership
    # This request updates an instance group membership with the information provided instance group membership patch.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param instance_group_id [String] The instance group identifier
    # @param id [String] The instance group membership identifier
    # @param instance_group_membership_patch [InstanceGroupMembershipPatch] The instance group membership patch
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstanceGroupMembership, Integer, Hash)>] InstanceGroupMembership data, response status code and response headers
    def update_instance_group_membership_with_http_info(version, generation, instance_group_id, id, instance_group_membership_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstanceGroupsApi.update_instance_group_membership ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstanceGroupsApi.update_instance_group_membership"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling InstanceGroupsApi.update_instance_group_membership, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling InstanceGroupsApi.update_instance_group_membership"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'instance_group_id' is set
      if @api_client.config.client_side_validation && instance_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_id' when calling InstanceGroupsApi.update_instance_group_membership"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstanceGroupsApi.update_instance_group_membership"
      end
      # verify the required parameter 'instance_group_membership_patch' is set
      if @api_client.config.client_side_validation && instance_group_membership_patch.nil?
        fail ArgumentError, "Missing the required parameter 'instance_group_membership_patch' when calling InstanceGroupsApi.update_instance_group_membership"
      end
      # resource path
      local_var_path = '/instance_groups/{instance_group_id}/memberships/{id}'.sub('{' + 'instance_group_id' + '}', CGI.escape(instance_group_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(instance_group_membership_patch) 

      # return_type
      return_type = opts[:return_type] || 'InstanceGroupMembership' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstanceGroupsApi#update_instance_group_membership\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

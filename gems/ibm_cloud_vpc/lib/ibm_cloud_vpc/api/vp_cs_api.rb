=begin
#Virtual Private Cloud API

#The IBM Cloud Virtual Private Cloud (VPC) API can be used to programmatically provision and manage infrastructure resources, including virtual server instances, subnets, volumes, and load balancers.

The version of the OpenAPI document: 2020-09-08

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-beta2

=end

require 'cgi'

module IbmCloudVpc
  class VPCsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a VPC
    # This request creates a new VPC from a VPC prototype object. The prototype object is structured in the same way as a retrieved VPC, and contains the information necessary to create the new VPC.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [VPCPrototype] :vpc_prototype The VPC prototype object
    # @return [VPC]
    def create_vpc(version, generation, opts = {})
      data, _status_code, _headers = create_vpc_with_http_info(version, generation, opts)
      data
    end

    # Create a VPC
    # This request creates a new VPC from a VPC prototype object. The prototype object is structured in the same way as a retrieved VPC, and contains the information necessary to create the new VPC.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [VPCPrototype] :vpc_prototype The VPC prototype object
    # @return [Array<(VPC, Integer, Hash)>] VPC data, response status code and response headers
    def create_vpc_with_http_info(version, generation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.create_vpc ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.create_vpc"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.create_vpc, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.create_vpc"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/vpcs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'vpc_prototype']) 

      # return_type
      return_type = opts[:return_type] || 'VPC' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#create_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an address pool prefix
    # This request creates a new prefix from a prefix prototype object. The prototype object is structured in the same way as a retrieved prefix, and contains the information necessary to create the new prefix.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param address_prefix_prototype [AddressPrefixPrototype] The prefix prototype object
    # @param [Hash] opts the optional parameters
    # @return [AddressPrefix]
    def create_vpc_address_prefix(version, generation, vpc_id, address_prefix_prototype, opts = {})
      data, _status_code, _headers = create_vpc_address_prefix_with_http_info(version, generation, vpc_id, address_prefix_prototype, opts)
      data
    end

    # Create an address pool prefix
    # This request creates a new prefix from a prefix prototype object. The prototype object is structured in the same way as a retrieved prefix, and contains the information necessary to create the new prefix.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param address_prefix_prototype [AddressPrefixPrototype] The prefix prototype object
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddressPrefix, Integer, Hash)>] AddressPrefix data, response status code and response headers
    def create_vpc_address_prefix_with_http_info(version, generation, vpc_id, address_prefix_prototype, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.create_vpc_address_prefix ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.create_vpc_address_prefix"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.create_vpc_address_prefix, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.create_vpc_address_prefix"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.create_vpc_address_prefix"
      end
      # verify the required parameter 'address_prefix_prototype' is set
      if @api_client.config.client_side_validation && address_prefix_prototype.nil?
        fail ArgumentError, "Missing the required parameter 'address_prefix_prototype' when calling VPCsApi.create_vpc_address_prefix"
      end
      # resource path
      local_var_path = '/vpcs/{vpc_id}/address_prefixes'.sub('{' + 'vpc_id' + '}', CGI.escape(vpc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(address_prefix_prototype) 

      # return_type
      return_type = opts[:return_type] || 'AddressPrefix' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#create_vpc_address_prefix\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a route in the VPC's default routing table
    # This request creates a new route in the VPC's default routing table. The route prototype object is structured in the same way as a retrieved route, and contains the information necessary to create the new route. The request will fail if the new route will cause a loop.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param route_prototype [RoutePrototype] The route prototype object
    # @param [Hash] opts the optional parameters
    # @return [Route]
    def create_vpc_route(version, generation, vpc_id, route_prototype, opts = {})
      data, _status_code, _headers = create_vpc_route_with_http_info(version, generation, vpc_id, route_prototype, opts)
      data
    end

    # Create a route in the VPC&#39;s default routing table
    # This request creates a new route in the VPC&#39;s default routing table. The route prototype object is structured in the same way as a retrieved route, and contains the information necessary to create the new route. The request will fail if the new route will cause a loop.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param route_prototype [RoutePrototype] The route prototype object
    # @param [Hash] opts the optional parameters
    # @return [Array<(Route, Integer, Hash)>] Route data, response status code and response headers
    def create_vpc_route_with_http_info(version, generation, vpc_id, route_prototype, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.create_vpc_route ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.create_vpc_route"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.create_vpc_route, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.create_vpc_route"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.create_vpc_route"
      end
      # verify the required parameter 'route_prototype' is set
      if @api_client.config.client_side_validation && route_prototype.nil?
        fail ArgumentError, "Missing the required parameter 'route_prototype' when calling VPCsApi.create_vpc_route"
      end
      # resource path
      local_var_path = '/vpcs/{vpc_id}/routes'.sub('{' + 'vpc_id' + '}', CGI.escape(vpc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(route_prototype) 

      # return_type
      return_type = opts[:return_type] || 'Route' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#create_vpc_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete specified VPC
    # This request deletes a VPC. This operation cannot be reversed. For this request to succeed, the VPC must not contain any instances, subnets, or public gateways. All security groups and network ACLs associated with the VPC are automatically deleted. All flow log collectors with `auto_delete` set to `true` targeting the VPC or any resource in the VPC are automatically deleted.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The VPC identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc(version, generation, id, opts = {})
      delete_vpc_with_http_info(version, generation, id, opts)
      nil
    end

    # Delete specified VPC
    # This request deletes a VPC. This operation cannot be reversed. For this request to succeed, the VPC must not contain any instances, subnets, or public gateways. All security groups and network ACLs associated with the VPC are automatically deleted. All flow log collectors with &#x60;auto_delete&#x60; set to &#x60;true&#x60; targeting the VPC or any resource in the VPC are automatically deleted.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The VPC identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_vpc_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.delete_vpc ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.delete_vpc"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.delete_vpc, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.delete_vpc"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPCsApi.delete_vpc"
      end
      # resource path
      local_var_path = '/vpcs/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#delete_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete specified address pool prefix
    # This request deletes a prefix. This operation cannot be reversed. The request will fail if any subnets use addresses from this prefix.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param id [String] The prefix identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_address_prefix(version, generation, vpc_id, id, opts = {})
      delete_vpc_address_prefix_with_http_info(version, generation, vpc_id, id, opts)
      nil
    end

    # Delete specified address pool prefix
    # This request deletes a prefix. This operation cannot be reversed. The request will fail if any subnets use addresses from this prefix.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param id [String] The prefix identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_vpc_address_prefix_with_http_info(version, generation, vpc_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.delete_vpc_address_prefix ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.delete_vpc_address_prefix"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.delete_vpc_address_prefix, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.delete_vpc_address_prefix"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.delete_vpc_address_prefix"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPCsApi.delete_vpc_address_prefix"
      end
      # resource path
      local_var_path = '/vpcs/{vpc_id}/address_prefixes/{id}'.sub('{' + 'vpc_id' + '}', CGI.escape(vpc_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#delete_vpc_address_prefix\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the specified route in the VPC's default routing table
    # This request deletes a route. This operation cannot be reversed.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param id [String] The route identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpc_route(version, generation, vpc_id, id, opts = {})
      delete_vpc_route_with_http_info(version, generation, vpc_id, id, opts)
      nil
    end

    # Delete the specified route in the VPC&#39;s default routing table
    # This request deletes a route. This operation cannot be reversed.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param id [String] The route identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_vpc_route_with_http_info(version, generation, vpc_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.delete_vpc_route ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.delete_vpc_route"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.delete_vpc_route, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.delete_vpc_route"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.delete_vpc_route"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPCsApi.delete_vpc_route"
      end
      # resource path
      local_var_path = '/vpcs/{vpc_id}/routes/{id}'.sub('{' + 'vpc_id' + '}', CGI.escape(vpc_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#delete_vpc_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve specified VPC
    # This request retrieves a single VPC specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The VPC identifier
    # @param [Hash] opts the optional parameters
    # @return [VPC]
    def get_vpc(version, generation, id, opts = {})
      data, _status_code, _headers = get_vpc_with_http_info(version, generation, id, opts)
      data
    end

    # Retrieve specified VPC
    # This request retrieves a single VPC specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The VPC identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPC, Integer, Hash)>] VPC data, response status code and response headers
    def get_vpc_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.get_vpc ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.get_vpc"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.get_vpc, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.get_vpc"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPCsApi.get_vpc"
      end
      # resource path
      local_var_path = '/vpcs/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'VPC' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#get_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve specified address pool prefix
    # This request retrieves a single prefix specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param id [String] The prefix identifier
    # @param [Hash] opts the optional parameters
    # @return [AddressPrefix]
    def get_vpc_address_prefix(version, generation, vpc_id, id, opts = {})
      data, _status_code, _headers = get_vpc_address_prefix_with_http_info(version, generation, vpc_id, id, opts)
      data
    end

    # Retrieve specified address pool prefix
    # This request retrieves a single prefix specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param id [String] The prefix identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddressPrefix, Integer, Hash)>] AddressPrefix data, response status code and response headers
    def get_vpc_address_prefix_with_http_info(version, generation, vpc_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.get_vpc_address_prefix ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.get_vpc_address_prefix"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.get_vpc_address_prefix, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.get_vpc_address_prefix"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.get_vpc_address_prefix"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPCsApi.get_vpc_address_prefix"
      end
      # resource path
      local_var_path = '/vpcs/{vpc_id}/address_prefixes/{id}'.sub('{' + 'vpc_id' + '}', CGI.escape(vpc_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AddressPrefix' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#get_vpc_address_prefix\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a VPC's default network ACL
    # This request retrieves the default network ACL for the VPC specified by the identifier in the URL. The default network ACL is applied to any new subnets in the VPC which do not specify a network ACL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The VPC identifier
    # @param [Hash] opts the optional parameters
    # @return [DefaultNetworkACL]
    def get_vpc_default_network_acl(version, generation, id, opts = {})
      data, _status_code, _headers = get_vpc_default_network_acl_with_http_info(version, generation, id, opts)
      data
    end

    # Retrieve a VPC&#39;s default network ACL
    # This request retrieves the default network ACL for the VPC specified by the identifier in the URL. The default network ACL is applied to any new subnets in the VPC which do not specify a network ACL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The VPC identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultNetworkACL, Integer, Hash)>] DefaultNetworkACL data, response status code and response headers
    def get_vpc_default_network_acl_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.get_vpc_default_network_acl ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.get_vpc_default_network_acl"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.get_vpc_default_network_acl, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.get_vpc_default_network_acl"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPCsApi.get_vpc_default_network_acl"
      end
      # resource path
      local_var_path = '/vpcs/{id}/default_network_acl'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DefaultNetworkACL' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#get_vpc_default_network_acl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a VPC's default security group
    # This request retrieves the default security group for the VPC specified by the identifier in the URL. The default security group is applied to any new network interfaces in the VPC that do not specify a security group.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The VPC identifier
    # @param [Hash] opts the optional parameters
    # @return [DefaultSecurityGroup]
    def get_vpc_default_security_group(version, generation, id, opts = {})
      data, _status_code, _headers = get_vpc_default_security_group_with_http_info(version, generation, id, opts)
      data
    end

    # Retrieve a VPC&#39;s default security group
    # This request retrieves the default security group for the VPC specified by the identifier in the URL. The default security group is applied to any new network interfaces in the VPC that do not specify a security group.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The VPC identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSecurityGroup, Integer, Hash)>] DefaultSecurityGroup data, response status code and response headers
    def get_vpc_default_security_group_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.get_vpc_default_security_group ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.get_vpc_default_security_group"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.get_vpc_default_security_group, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.get_vpc_default_security_group"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPCsApi.get_vpc_default_security_group"
      end
      # resource path
      local_var_path = '/vpcs/{id}/default_security_group'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DefaultSecurityGroup' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#get_vpc_default_security_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the specified route in the VPC's default routing table
    # This request retrieves a single route specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param id [String] The route identifier
    # @param [Hash] opts the optional parameters
    # @return [Route]
    def get_vpc_route(version, generation, vpc_id, id, opts = {})
      data, _status_code, _headers = get_vpc_route_with_http_info(version, generation, vpc_id, id, opts)
      data
    end

    # Retrieve the specified route in the VPC&#39;s default routing table
    # This request retrieves a single route specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param id [String] The route identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Route, Integer, Hash)>] Route data, response status code and response headers
    def get_vpc_route_with_http_info(version, generation, vpc_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.get_vpc_route ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.get_vpc_route"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.get_vpc_route, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.get_vpc_route"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.get_vpc_route"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPCsApi.get_vpc_route"
      end
      # resource path
      local_var_path = '/vpcs/{vpc_id}/routes/{id}'.sub('{' + 'vpc_id' + '}', CGI.escape(vpc_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Route' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#get_vpc_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all address pool prefixes for a VPC
    # This request lists all address pool prefixes for a VPC.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page (default to 50)
    # @return [AddressPrefixCollection]
    def list_vpc_address_prefixes(version, generation, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_address_prefixes_with_http_info(version, generation, vpc_id, opts)
      data
    end

    # List all address pool prefixes for a VPC
    # This request lists all address pool prefixes for a VPC.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page
    # @return [Array<(AddressPrefixCollection, Integer, Hash)>] AddressPrefixCollection data, response status code and response headers
    def list_vpc_address_prefixes_with_http_info(version, generation, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.list_vpc_address_prefixes ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.list_vpc_address_prefixes"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.list_vpc_address_prefixes, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.list_vpc_address_prefixes"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.list_vpc_address_prefixes"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VPCsApi.list_vpc_address_prefixes, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VPCsApi.list_vpc_address_prefixes, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vpcs/{vpc_id}/address_prefixes'.sub('{' + 'vpc_id' + '}', CGI.escape(vpc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AddressPrefixCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#list_vpc_address_prefixes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all routes in the VPC's default routing table.
    # This request retrieves routes in the VPC's default routing table. For compatibility, routes with `action` values other than `deliver` are omitted. Each route is zone-specific and directs any packets matching its destination CIDR block to a `next_hop` IP address. The most specific route matching a packet's destination will be used. If multiple equally-specific routes exist, traffic will be distributed across them.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zone_name Filters the collection to resources in the zone with the exact specified name
    # @return [RouteCollection]
    def list_vpc_routes(version, generation, vpc_id, opts = {})
      data, _status_code, _headers = list_vpc_routes_with_http_info(version, generation, vpc_id, opts)
      data
    end

    # List all routes in the VPC&#39;s default routing table.
    # This request retrieves routes in the VPC&#39;s default routing table. For compatibility, routes with &#x60;action&#x60; values other than &#x60;deliver&#x60; are omitted. Each route is zone-specific and directs any packets matching its destination CIDR block to a &#x60;next_hop&#x60; IP address. The most specific route matching a packet&#39;s destination will be used. If multiple equally-specific routes exist, traffic will be distributed across them.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :zone_name Filters the collection to resources in the zone with the exact specified name
    # @return [Array<(RouteCollection, Integer, Hash)>] RouteCollection data, response status code and response headers
    def list_vpc_routes_with_http_info(version, generation, vpc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.list_vpc_routes ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.list_vpc_routes"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.list_vpc_routes, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.list_vpc_routes"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.list_vpc_routes"
      end
      # resource path
      local_var_path = '/vpcs/{vpc_id}/routes'.sub('{' + 'vpc_id' + '}', CGI.escape(vpc_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation
      query_params[:'zone.name'] = opts[:'zone_name'] if !opts[:'zone_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'RouteCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#list_vpc_routes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all VPCs
    # This request lists all VPCs. A VPC is a virtual network that belongs to an account and provides logical isolation from other networks. A VPC is made up of resources in one or more zones. VPCs are regional, and each VPC can contain resources in multiple zones in a region.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page (default to 50)
    # @option opts [String] :resource_group_id Filters the collection to resources within one of the resource groups identified in a comma-separated list of resource group identifiers
    # @option opts [Boolean] :classic_access The &#x60;classic_access&#x60; parameter filters the returned collection by the supplied field. If the supplied field is &#x60;true&#x60;, only Classic Access VPCs will be returned. If the supplied field is &#x60;false&#x60;, only VPCs without Classic Access will be returned.
    # @return [VPCCollection]
    def list_vpcs(version, generation, opts = {})
      data, _status_code, _headers = list_vpcs_with_http_info(version, generation, opts)
      data
    end

    # List all VPCs
    # This request lists all VPCs. A VPC is a virtual network that belongs to an account and provides logical isolation from other networks. A VPC is made up of resources in one or more zones. VPCs are regional, and each VPC can contain resources in multiple zones in a region.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page
    # @option opts [String] :resource_group_id Filters the collection to resources within one of the resource groups identified in a comma-separated list of resource group identifiers
    # @option opts [Boolean] :classic_access The &#x60;classic_access&#x60; parameter filters the returned collection by the supplied field. If the supplied field is &#x60;true&#x60;, only Classic Access VPCs will be returned. If the supplied field is &#x60;false&#x60;, only VPCs without Classic Access will be returned.
    # @return [Array<(VPCCollection, Integer, Hash)>] VPCCollection data, response status code and response headers
    def list_vpcs_with_http_info(version, generation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.list_vpcs ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.list_vpcs"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.list_vpcs, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.list_vpcs"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VPCsApi.list_vpcs, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VPCsApi.list_vpcs, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vpcs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'resource_group.id'] = opts[:'resource_group_id'] if !opts[:'resource_group_id'].nil?
      query_params[:'classic_access'] = opts[:'classic_access'] if !opts[:'classic_access'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'VPCCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#list_vpcs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update specified VPC
    # This request updates a VPC's name.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The VPC identifier
    # @param vpc_patch [VPCPatch] The VPC patch
    # @param [Hash] opts the optional parameters
    # @return [VPC]
    def update_vpc(version, generation, id, vpc_patch, opts = {})
      data, _status_code, _headers = update_vpc_with_http_info(version, generation, id, vpc_patch, opts)
      data
    end

    # Update specified VPC
    # This request updates a VPC&#39;s name.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The VPC identifier
    # @param vpc_patch [VPCPatch] The VPC patch
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPC, Integer, Hash)>] VPC data, response status code and response headers
    def update_vpc_with_http_info(version, generation, id, vpc_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.update_vpc ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.update_vpc"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.update_vpc, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.update_vpc"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPCsApi.update_vpc"
      end
      # verify the required parameter 'vpc_patch' is set
      if @api_client.config.client_side_validation && vpc_patch.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_patch' when calling VPCsApi.update_vpc"
      end
      # resource path
      local_var_path = '/vpcs/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(vpc_patch) 

      # return_type
      return_type = opts[:return_type] || 'VPC' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#update_vpc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an address pool prefix
    # This request updates a prefix with the information in a provided prefix patch. The prefix patch object is structured in the same way as a retrieved prefix and contains only the information to be updated.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param id [String] The prefix identifier
    # @param address_prefix_patch [AddressPrefixPatch] The prefix patch
    # @param [Hash] opts the optional parameters
    # @return [AddressPrefix]
    def update_vpc_address_prefix(version, generation, vpc_id, id, address_prefix_patch, opts = {})
      data, _status_code, _headers = update_vpc_address_prefix_with_http_info(version, generation, vpc_id, id, address_prefix_patch, opts)
      data
    end

    # Update an address pool prefix
    # This request updates a prefix with the information in a provided prefix patch. The prefix patch object is structured in the same way as a retrieved prefix and contains only the information to be updated.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param id [String] The prefix identifier
    # @param address_prefix_patch [AddressPrefixPatch] The prefix patch
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddressPrefix, Integer, Hash)>] AddressPrefix data, response status code and response headers
    def update_vpc_address_prefix_with_http_info(version, generation, vpc_id, id, address_prefix_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.update_vpc_address_prefix ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.update_vpc_address_prefix"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.update_vpc_address_prefix, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.update_vpc_address_prefix"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.update_vpc_address_prefix"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPCsApi.update_vpc_address_prefix"
      end
      # verify the required parameter 'address_prefix_patch' is set
      if @api_client.config.client_side_validation && address_prefix_patch.nil?
        fail ArgumentError, "Missing the required parameter 'address_prefix_patch' when calling VPCsApi.update_vpc_address_prefix"
      end
      # resource path
      local_var_path = '/vpcs/{vpc_id}/address_prefixes/{id}'.sub('{' + 'vpc_id' + '}', CGI.escape(vpc_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(address_prefix_patch) 

      # return_type
      return_type = opts[:return_type] || 'AddressPrefix' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#update_vpc_address_prefix\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the specified route in the VPC's default routing table
    # This request updates a route with the information in a provided route patch. The route patch object is structured in the same way as a retrieved route and contains only the information to be updated.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param id [String] The route identifier
    # @param route_patch [RoutePatch] The route patch
    # @param [Hash] opts the optional parameters
    # @return [Route]
    def update_vpc_route(version, generation, vpc_id, id, route_patch, opts = {})
      data, _status_code, _headers = update_vpc_route_with_http_info(version, generation, vpc_id, id, route_patch, opts)
      data
    end

    # Update the specified route in the VPC&#39;s default routing table
    # This request updates a route with the information in a provided route patch. The route patch object is structured in the same way as a retrieved route and contains only the information to be updated.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpc_id [String] The VPC identifier
    # @param id [String] The route identifier
    # @param route_patch [RoutePatch] The route patch
    # @param [Hash] opts the optional parameters
    # @return [Array<(Route, Integer, Hash)>] Route data, response status code and response headers
    def update_vpc_route_with_http_info(version, generation, vpc_id, id, route_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPCsApi.update_vpc_route ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPCsApi.update_vpc_route"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPCsApi.update_vpc_route, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPCsApi.update_vpc_route"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpc_id' is set
      if @api_client.config.client_side_validation && vpc_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpc_id' when calling VPCsApi.update_vpc_route"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPCsApi.update_vpc_route"
      end
      # verify the required parameter 'route_patch' is set
      if @api_client.config.client_side_validation && route_patch.nil?
        fail ArgumentError, "Missing the required parameter 'route_patch' when calling VPCsApi.update_vpc_route"
      end
      # resource path
      local_var_path = '/vpcs/{vpc_id}/routes/{id}'.sub('{' + 'vpc_id' + '}', CGI.escape(vpc_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(route_patch) 

      # return_type
      return_type = opts[:return_type] || 'Route' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPCsApi#update_vpc_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

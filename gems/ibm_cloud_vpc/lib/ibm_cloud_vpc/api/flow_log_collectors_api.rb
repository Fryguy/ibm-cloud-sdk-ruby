=begin
#Virtual Private Cloud API

#The IBM Cloud Virtual Private Cloud (VPC) API can be used to programmatically provision and manage infrastructure resources, including virtual server instances, subnets, volumes, and load balancers.

The version of the OpenAPI document: 2020-09-08

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-beta2

=end

require 'cgi'

module IbmCloudVpc
  class FlowLogCollectorsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a flow log collector
    # This request creates and starts a new flow log collector from a flow log collector prototype object. The prototype object is structured in the same way as a retrieved flow log collector, and contains the information necessary to create and start the new flow log collector.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] The flow log collector prototype object
    # @param [Hash] opts the optional parameters
    # @return [FlowLogCollector]
    def create_flow_log_collector(version, generation, unknown_base_type, opts = {})
      data, _status_code, _headers = create_flow_log_collector_with_http_info(version, generation, unknown_base_type, opts)
      data
    end

    # Create a flow log collector
    # This request creates and starts a new flow log collector from a flow log collector prototype object. The prototype object is structured in the same way as a retrieved flow log collector, and contains the information necessary to create and start the new flow log collector.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] The flow log collector prototype object
    # @param [Hash] opts the optional parameters
    # @return [Array<(FlowLogCollector, Integer, Hash)>] FlowLogCollector data, response status code and response headers
    def create_flow_log_collector_with_http_info(version, generation, unknown_base_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowLogCollectorsApi.create_flow_log_collector ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling FlowLogCollectorsApi.create_flow_log_collector"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling FlowLogCollectorsApi.create_flow_log_collector, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling FlowLogCollectorsApi.create_flow_log_collector"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'unknown_base_type' is set
      if @api_client.config.client_side_validation && unknown_base_type.nil?
        fail ArgumentError, "Missing the required parameter 'unknown_base_type' when calling FlowLogCollectorsApi.create_flow_log_collector"
      end
      # resource path
      local_var_path = '/flow_log_collectors'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(unknown_base_type) 

      # return_type
      return_type = opts[:return_type] || 'FlowLogCollector' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowLogCollectorsApi#create_flow_log_collector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the specified flow log collector
    # This request stops and deletes a flow log collector. Collected flow logs remain available within the flow log collector's bucket.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The flow log collector identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_flow_log_collector(version, generation, id, opts = {})
      delete_flow_log_collector_with_http_info(version, generation, id, opts)
      nil
    end

    # Delete the specified flow log collector
    # This request stops and deletes a flow log collector. Collected flow logs remain available within the flow log collector&#39;s bucket.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The flow log collector identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_flow_log_collector_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowLogCollectorsApi.delete_flow_log_collector ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling FlowLogCollectorsApi.delete_flow_log_collector"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling FlowLogCollectorsApi.delete_flow_log_collector, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling FlowLogCollectorsApi.delete_flow_log_collector"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlowLogCollectorsApi.delete_flow_log_collector"
      end
      # resource path
      local_var_path = '/flow_log_collectors/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowLogCollectorsApi#delete_flow_log_collector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the specified flow log collector
    # This request retrieves a single flow log collector specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The flow log collector identifier
    # @param [Hash] opts the optional parameters
    # @return [FlowLogCollector]
    def get_flow_log_collector(version, generation, id, opts = {})
      data, _status_code, _headers = get_flow_log_collector_with_http_info(version, generation, id, opts)
      data
    end

    # Retrieve the specified flow log collector
    # This request retrieves a single flow log collector specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The flow log collector identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(FlowLogCollector, Integer, Hash)>] FlowLogCollector data, response status code and response headers
    def get_flow_log_collector_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowLogCollectorsApi.get_flow_log_collector ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling FlowLogCollectorsApi.get_flow_log_collector"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling FlowLogCollectorsApi.get_flow_log_collector, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling FlowLogCollectorsApi.get_flow_log_collector"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlowLogCollectorsApi.get_flow_log_collector"
      end
      # resource path
      local_var_path = '/flow_log_collectors/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'FlowLogCollector' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowLogCollectorsApi#get_flow_log_collector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all flow log collectors
    # This request retrieves all flow log collectors in the region. A flow log collector summarizes data sent over one or more network interfaces within a VPC, depending on the chosen target.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page (default to 50)
    # @option opts [String] :resource_group_id Filters the collection to resources within one of the resource groups identified in a comma-separated list of resource group identifiers
    # @option opts [String] :name Filters the collection to resources with the exact specified name
    # @option opts [String] :vpc_id Filters the collection to resources in the VPC with the specified identifier
    # @option opts [String] :vpc_crn Filters the collection to resources in the VPC with the specified CRN
    # @option opts [String] :vpc_name Filters the collection to resources in the VPC with the exact specified name
    # @option opts [String] :target_id Filters the collection to flow log collectors that target the specified resource.
    # @option opts [String] :target_resource_type Filters the collection to flow log collectors that target the specified resource type.
    # @return [FlowLogCollectorCollection]
    def list_flow_log_collectors(version, generation, opts = {})
      data, _status_code, _headers = list_flow_log_collectors_with_http_info(version, generation, opts)
      data
    end

    # List all flow log collectors
    # This request retrieves all flow log collectors in the region. A flow log collector summarizes data sent over one or more network interfaces within a VPC, depending on the chosen target.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page
    # @option opts [String] :resource_group_id Filters the collection to resources within one of the resource groups identified in a comma-separated list of resource group identifiers
    # @option opts [String] :name Filters the collection to resources with the exact specified name
    # @option opts [String] :vpc_id Filters the collection to resources in the VPC with the specified identifier
    # @option opts [String] :vpc_crn Filters the collection to resources in the VPC with the specified CRN
    # @option opts [String] :vpc_name Filters the collection to resources in the VPC with the exact specified name
    # @option opts [String] :target_id Filters the collection to flow log collectors that target the specified resource.
    # @option opts [String] :target_resource_type Filters the collection to flow log collectors that target the specified resource type.
    # @return [Array<(FlowLogCollectorCollection, Integer, Hash)>] FlowLogCollectorCollection data, response status code and response headers
    def list_flow_log_collectors_with_http_info(version, generation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowLogCollectorsApi.list_flow_log_collectors ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling FlowLogCollectorsApi.list_flow_log_collectors"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling FlowLogCollectorsApi.list_flow_log_collectors, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling FlowLogCollectorsApi.list_flow_log_collectors"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling FlowLogCollectorsApi.list_flow_log_collectors, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling FlowLogCollectorsApi.list_flow_log_collectors, must be greater than or equal to 1.'
      end

      allowable_values = ["vpc", "subnet", "instance", "network_interface"]
      if @api_client.config.client_side_validation && opts[:'target_resource_type'] && !allowable_values.include?(opts[:'target_resource_type'])
        fail ArgumentError, "invalid value for \"target_resource_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/flow_log_collectors'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'resource_group.id'] = opts[:'resource_group_id'] if !opts[:'resource_group_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'vpc.id'] = opts[:'vpc_id'] if !opts[:'vpc_id'].nil?
      query_params[:'vpc.crn'] = opts[:'vpc_crn'] if !opts[:'vpc_crn'].nil?
      query_params[:'vpc.name'] = opts[:'vpc_name'] if !opts[:'vpc_name'].nil?
      query_params[:'target.id'] = opts[:'target_id'] if !opts[:'target_id'].nil?
      query_params[:'target.resource_type'] = opts[:'target_resource_type'] if !opts[:'target_resource_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'FlowLogCollectorCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowLogCollectorsApi#list_flow_log_collectors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the specified flow log collector
    # This request updates a flow log collector with the information in a provided flow log collector patch. The flow log collector patch object is structured in the same way as a retrieved flow log collector and contains only the information to be updated.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The flow log collector identifier
    # @param flow_log_collector_patch [FlowLogCollectorPatch] The flow log collector patch
    # @param [Hash] opts the optional parameters
    # @return [FlowLogCollector]
    def update_flow_log_collector(version, generation, id, flow_log_collector_patch, opts = {})
      data, _status_code, _headers = update_flow_log_collector_with_http_info(version, generation, id, flow_log_collector_patch, opts)
      data
    end

    # Update the specified flow log collector
    # This request updates a flow log collector with the information in a provided flow log collector patch. The flow log collector patch object is structured in the same way as a retrieved flow log collector and contains only the information to be updated.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The flow log collector identifier
    # @param flow_log_collector_patch [FlowLogCollectorPatch] The flow log collector patch
    # @param [Hash] opts the optional parameters
    # @return [Array<(FlowLogCollector, Integer, Hash)>] FlowLogCollector data, response status code and response headers
    def update_flow_log_collector_with_http_info(version, generation, id, flow_log_collector_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FlowLogCollectorsApi.update_flow_log_collector ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling FlowLogCollectorsApi.update_flow_log_collector"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling FlowLogCollectorsApi.update_flow_log_collector, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling FlowLogCollectorsApi.update_flow_log_collector"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlowLogCollectorsApi.update_flow_log_collector"
      end
      # verify the required parameter 'flow_log_collector_patch' is set
      if @api_client.config.client_side_validation && flow_log_collector_patch.nil?
        fail ArgumentError, "Missing the required parameter 'flow_log_collector_patch' when calling FlowLogCollectorsApi.update_flow_log_collector"
      end
      # resource path
      local_var_path = '/flow_log_collectors/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(flow_log_collector_patch) 

      # return_type
      return_type = opts[:return_type] || 'FlowLogCollector' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlowLogCollectorsApi#update_flow_log_collector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#Virtual Private Cloud API

#The IBM Cloud Virtual Private Cloud (VPC) API can be used to programmatically provision and manage infrastructure resources, including virtual server instances, subnets, volumes, and load balancers.

The version of the OpenAPI document: 2020-09-08

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-beta2

=end

require 'cgi'

module IbmCloudVpc
  class KeysApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a key
    # This request creates a new SSH key from an key prototype object. The prototype object is structured in the same way as a retrieved key, and contains the information necessary to create the new key. The public key value must be provided.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param key_prototype [KeyPrototype] The key prototype object
    # @param [Hash] opts the optional parameters
    # @return [Key]
    def create_key(version, generation, key_prototype, opts = {})
      data, _status_code, _headers = create_key_with_http_info(version, generation, key_prototype, opts)
      data
    end

    # Create a key
    # This request creates a new SSH key from an key prototype object. The prototype object is structured in the same way as a retrieved key, and contains the information necessary to create the new key. The public key value must be provided.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param key_prototype [KeyPrototype] The key prototype object
    # @param [Hash] opts the optional parameters
    # @return [Array<(Key, Integer, Hash)>] Key data, response status code and response headers
    def create_key_with_http_info(version, generation, key_prototype, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KeysApi.create_key ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling KeysApi.create_key"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling KeysApi.create_key, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling KeysApi.create_key"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'key_prototype' is set
      if @api_client.config.client_side_validation && key_prototype.nil?
        fail ArgumentError, "Missing the required parameter 'key_prototype' when calling KeysApi.create_key"
      end
      # resource path
      local_var_path = '/keys'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(key_prototype) 

      # return_type
      return_type = opts[:return_type] || 'Key' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KeysApi#create_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete specified key
    # This request deletes a key. This operation cannot be reversed.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The key identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_key(version, generation, id, opts = {})
      delete_key_with_http_info(version, generation, id, opts)
      nil
    end

    # Delete specified key
    # This request deletes a key. This operation cannot be reversed.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The key identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_key_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KeysApi.delete_key ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling KeysApi.delete_key"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling KeysApi.delete_key, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling KeysApi.delete_key"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling KeysApi.delete_key"
      end
      # resource path
      local_var_path = '/keys/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KeysApi#delete_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve specified key
    # This request retrieves a single key specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The key identifier
    # @param [Hash] opts the optional parameters
    # @return [Key]
    def get_key(version, generation, id, opts = {})
      data, _status_code, _headers = get_key_with_http_info(version, generation, id, opts)
      data
    end

    # Retrieve specified key
    # This request retrieves a single key specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The key identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Key, Integer, Hash)>] Key data, response status code and response headers
    def get_key_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KeysApi.get_key ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling KeysApi.get_key"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling KeysApi.get_key, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling KeysApi.get_key"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling KeysApi.get_key"
      end
      # resource path
      local_var_path = '/keys/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Key' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KeysApi#get_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all keys
    # This request lists all keys. A key contains a public SSH key which may be installed on instances when they are created. Private keys are not stored.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_group_id Filters the collection to resources within one of the resource groups identified in a comma-separated list of resource group identifiers
    # @return [KeyCollection]
    def list_keys(version, generation, opts = {})
      data, _status_code, _headers = list_keys_with_http_info(version, generation, opts)
      data
    end

    # List all keys
    # This request lists all keys. A key contains a public SSH key which may be installed on instances when they are created. Private keys are not stored.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_group_id Filters the collection to resources within one of the resource groups identified in a comma-separated list of resource group identifiers
    # @return [Array<(KeyCollection, Integer, Hash)>] KeyCollection data, response status code and response headers
    def list_keys_with_http_info(version, generation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KeysApi.list_keys ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling KeysApi.list_keys"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling KeysApi.list_keys, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling KeysApi.list_keys"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/keys'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation
      query_params[:'resource_group.id'] = opts[:'resource_group_id'] if !opts[:'resource_group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'KeyCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KeysApi#list_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update specified key
    # This request updates a key's name.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The key identifier
    # @param key_patch [KeyPatch] The key patch
    # @param [Hash] opts the optional parameters
    # @return [Key]
    def update_key(version, generation, id, key_patch, opts = {})
      data, _status_code, _headers = update_key_with_http_info(version, generation, id, key_patch, opts)
      data
    end

    # Update specified key
    # This request updates a key&#39;s name.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The key identifier
    # @param key_patch [KeyPatch] The key patch
    # @param [Hash] opts the optional parameters
    # @return [Array<(Key, Integer, Hash)>] Key data, response status code and response headers
    def update_key_with_http_info(version, generation, id, key_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KeysApi.update_key ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling KeysApi.update_key"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling KeysApi.update_key, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling KeysApi.update_key"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling KeysApi.update_key"
      end
      # verify the required parameter 'key_patch' is set
      if @api_client.config.client_side_validation && key_patch.nil?
        fail ArgumentError, "Missing the required parameter 'key_patch' when calling KeysApi.update_key"
      end
      # resource path
      local_var_path = '/keys/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(key_patch) 

      # return_type
      return_type = opts[:return_type] || 'Key' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KeysApi#update_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

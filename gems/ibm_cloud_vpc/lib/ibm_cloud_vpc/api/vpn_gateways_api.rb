=begin
#Virtual Private Cloud API

#The IBM Cloud Virtual Private Cloud (VPC) API can be used to programmatically provision and manage infrastructure resources, including virtual server instances, subnets, volumes, and load balancers.

The version of the OpenAPI document: 2020-09-08

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-beta2

=end

require 'cgi'

module IbmCloudVpc
  class VPNGatewaysApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Set a local CIDR on a VPN gateway connection
    # This request adds the specified CIDR to the specified VPN gateway connection. A request body is not required, and if supplied, is ignored. This request succeeds if the CIDR already exists on the specified VPN gateway connection.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param cidr_prefix [String] The address prefix part of the CIDR
    # @param prefix_length [String] The prefix length part of the CIDR
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_vpn_gateway_connection_local_cidr(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts = {})
      add_vpn_gateway_connection_local_cidr_with_http_info(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts)
      nil
    end

    # Set a local CIDR on a VPN gateway connection
    # This request adds the specified CIDR to the specified VPN gateway connection. A request body is not required, and if supplied, is ignored. This request succeeds if the CIDR already exists on the specified VPN gateway connection.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param cidr_prefix [String] The address prefix part of the CIDR
    # @param prefix_length [String] The prefix length part of the CIDR
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_vpn_gateway_connection_local_cidr_with_http_info(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.add_vpn_gateway_connection_local_cidr ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.add_vpn_gateway_connection_local_cidr"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.add_vpn_gateway_connection_local_cidr, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.add_vpn_gateway_connection_local_cidr"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpn_gateway_id' is set
      if @api_client.config.client_side_validation && vpn_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_id' when calling VPNGatewaysApi.add_vpn_gateway_connection_local_cidr"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.add_vpn_gateway_connection_local_cidr"
      end
      # verify the required parameter 'cidr_prefix' is set
      if @api_client.config.client_side_validation && cidr_prefix.nil?
        fail ArgumentError, "Missing the required parameter 'cidr_prefix' when calling VPNGatewaysApi.add_vpn_gateway_connection_local_cidr"
      end
      # verify the required parameter 'prefix_length' is set
      if @api_client.config.client_side_validation && prefix_length.nil?
        fail ArgumentError, "Missing the required parameter 'prefix_length' when calling VPNGatewaysApi.add_vpn_gateway_connection_local_cidr"
      end
      # resource path
      local_var_path = '/vpn_gateways/{vpn_gateway_id}/connections/{id}/local_cidrs/{cidr_prefix}/{prefix_length}'.sub('{' + 'vpn_gateway_id' + '}', CGI.escape(vpn_gateway_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'cidr_prefix' + '}', CGI.escape(cidr_prefix.to_s)).sub('{' + 'prefix_length' + '}', CGI.escape(prefix_length.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#add_vpn_gateway_connection_local_cidr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set a peer CIDR on a VPN gateway connection
    # This request adds the specified CIDR to the specified VPN gateway connection. A request body is not required, and if supplied, is ignored. This request succeeds if the CIDR already exists on the specified VPN gateway connection.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param cidr_prefix [String] The address prefix part of the CIDR
    # @param prefix_length [String] The prefix length part of the CIDR
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_vpn_gateway_connection_peer_cidr(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts = {})
      add_vpn_gateway_connection_peer_cidr_with_http_info(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts)
      nil
    end

    # Set a peer CIDR on a VPN gateway connection
    # This request adds the specified CIDR to the specified VPN gateway connection. A request body is not required, and if supplied, is ignored. This request succeeds if the CIDR already exists on the specified VPN gateway connection.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param cidr_prefix [String] The address prefix part of the CIDR
    # @param prefix_length [String] The prefix length part of the CIDR
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_vpn_gateway_connection_peer_cidr_with_http_info(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.add_vpn_gateway_connection_peer_cidr ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.add_vpn_gateway_connection_peer_cidr"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.add_vpn_gateway_connection_peer_cidr, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.add_vpn_gateway_connection_peer_cidr"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpn_gateway_id' is set
      if @api_client.config.client_side_validation && vpn_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_id' when calling VPNGatewaysApi.add_vpn_gateway_connection_peer_cidr"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.add_vpn_gateway_connection_peer_cidr"
      end
      # verify the required parameter 'cidr_prefix' is set
      if @api_client.config.client_side_validation && cidr_prefix.nil?
        fail ArgumentError, "Missing the required parameter 'cidr_prefix' when calling VPNGatewaysApi.add_vpn_gateway_connection_peer_cidr"
      end
      # verify the required parameter 'prefix_length' is set
      if @api_client.config.client_side_validation && prefix_length.nil?
        fail ArgumentError, "Missing the required parameter 'prefix_length' when calling VPNGatewaysApi.add_vpn_gateway_connection_peer_cidr"
      end
      # resource path
      local_var_path = '/vpn_gateways/{vpn_gateway_id}/connections/{id}/peer_cidrs/{cidr_prefix}/{prefix_length}'.sub('{' + 'vpn_gateway_id' + '}', CGI.escape(vpn_gateway_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'cidr_prefix' + '}', CGI.escape(cidr_prefix.to_s)).sub('{' + 'prefix_length' + '}', CGI.escape(prefix_length.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#add_vpn_gateway_connection_peer_cidr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if the specified local CIDR exists on a VPN gateway connection
    # This request succeeds if a CIDR exists on the specified VPN gateway connection and fails otherwise.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param cidr_prefix [String] The address prefix part of the CIDR
    # @param prefix_length [String] The prefix length part of the CIDR
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def check_vpn_gateway_connection_local_cidr(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts = {})
      check_vpn_gateway_connection_local_cidr_with_http_info(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts)
      nil
    end

    # Check if the specified local CIDR exists on a VPN gateway connection
    # This request succeeds if a CIDR exists on the specified VPN gateway connection and fails otherwise.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param cidr_prefix [String] The address prefix part of the CIDR
    # @param prefix_length [String] The prefix length part of the CIDR
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def check_vpn_gateway_connection_local_cidr_with_http_info(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.check_vpn_gateway_connection_local_cidr ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.check_vpn_gateway_connection_local_cidr"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.check_vpn_gateway_connection_local_cidr, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.check_vpn_gateway_connection_local_cidr"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpn_gateway_id' is set
      if @api_client.config.client_side_validation && vpn_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_id' when calling VPNGatewaysApi.check_vpn_gateway_connection_local_cidr"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.check_vpn_gateway_connection_local_cidr"
      end
      # verify the required parameter 'cidr_prefix' is set
      if @api_client.config.client_side_validation && cidr_prefix.nil?
        fail ArgumentError, "Missing the required parameter 'cidr_prefix' when calling VPNGatewaysApi.check_vpn_gateway_connection_local_cidr"
      end
      # verify the required parameter 'prefix_length' is set
      if @api_client.config.client_side_validation && prefix_length.nil?
        fail ArgumentError, "Missing the required parameter 'prefix_length' when calling VPNGatewaysApi.check_vpn_gateway_connection_local_cidr"
      end
      # resource path
      local_var_path = '/vpn_gateways/{vpn_gateway_id}/connections/{id}/local_cidrs/{cidr_prefix}/{prefix_length}'.sub('{' + 'vpn_gateway_id' + '}', CGI.escape(vpn_gateway_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'cidr_prefix' + '}', CGI.escape(cidr_prefix.to_s)).sub('{' + 'prefix_length' + '}', CGI.escape(prefix_length.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#check_vpn_gateway_connection_local_cidr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if the specified peer CIDR exists on a VPN gateway connection
    # This request succeeds if a CIDR exists on the specified VPN gateway connection and fails otherwise.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param cidr_prefix [String] The address prefix part of the CIDR
    # @param prefix_length [String] The prefix length part of the CIDR
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def check_vpn_gateway_connection_peer_cidr(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts = {})
      check_vpn_gateway_connection_peer_cidr_with_http_info(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts)
      nil
    end

    # Check if the specified peer CIDR exists on a VPN gateway connection
    # This request succeeds if a CIDR exists on the specified VPN gateway connection and fails otherwise.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param cidr_prefix [String] The address prefix part of the CIDR
    # @param prefix_length [String] The prefix length part of the CIDR
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def check_vpn_gateway_connection_peer_cidr_with_http_info(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.check_vpn_gateway_connection_peer_cidr ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.check_vpn_gateway_connection_peer_cidr"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.check_vpn_gateway_connection_peer_cidr, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.check_vpn_gateway_connection_peer_cidr"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpn_gateway_id' is set
      if @api_client.config.client_side_validation && vpn_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_id' when calling VPNGatewaysApi.check_vpn_gateway_connection_peer_cidr"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.check_vpn_gateway_connection_peer_cidr"
      end
      # verify the required parameter 'cidr_prefix' is set
      if @api_client.config.client_side_validation && cidr_prefix.nil?
        fail ArgumentError, "Missing the required parameter 'cidr_prefix' when calling VPNGatewaysApi.check_vpn_gateway_connection_peer_cidr"
      end
      # verify the required parameter 'prefix_length' is set
      if @api_client.config.client_side_validation && prefix_length.nil?
        fail ArgumentError, "Missing the required parameter 'prefix_length' when calling VPNGatewaysApi.check_vpn_gateway_connection_peer_cidr"
      end
      # resource path
      local_var_path = '/vpn_gateways/{vpn_gateway_id}/connections/{id}/peer_cidrs/{cidr_prefix}/{prefix_length}'.sub('{' + 'vpn_gateway_id' + '}', CGI.escape(vpn_gateway_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'cidr_prefix' + '}', CGI.escape(cidr_prefix.to_s)).sub('{' + 'prefix_length' + '}', CGI.escape(prefix_length.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#check_vpn_gateway_connection_peer_cidr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an IKE policy
    # This request creates a new IKE policy.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param ike_policy_prototype [IKEPolicyPrototype] The IKE policy prototype object.
    # @param [Hash] opts the optional parameters
    # @return [IKEPolicy]
    def create_ike_policy(version, generation, ike_policy_prototype, opts = {})
      data, _status_code, _headers = create_ike_policy_with_http_info(version, generation, ike_policy_prototype, opts)
      data
    end

    # Create an IKE policy
    # This request creates a new IKE policy.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param ike_policy_prototype [IKEPolicyPrototype] The IKE policy prototype object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IKEPolicy, Integer, Hash)>] IKEPolicy data, response status code and response headers
    def create_ike_policy_with_http_info(version, generation, ike_policy_prototype, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.create_ike_policy ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.create_ike_policy"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.create_ike_policy, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.create_ike_policy"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'ike_policy_prototype' is set
      if @api_client.config.client_side_validation && ike_policy_prototype.nil?
        fail ArgumentError, "Missing the required parameter 'ike_policy_prototype' when calling VPNGatewaysApi.create_ike_policy"
      end
      # resource path
      local_var_path = '/ike_policies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(ike_policy_prototype) 

      # return_type
      return_type = opts[:return_type] || 'IKEPolicy' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#create_ike_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an IPsec policy
    # This request creates a new IPsec policy.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param i_psec_policy_prototype [IPsecPolicyPrototype] The IPsec policy prototype object.
    # @param [Hash] opts the optional parameters
    # @return [IPsecPolicy]
    def create_ipsec_policy(version, generation, i_psec_policy_prototype, opts = {})
      data, _status_code, _headers = create_ipsec_policy_with_http_info(version, generation, i_psec_policy_prototype, opts)
      data
    end

    # Create an IPsec policy
    # This request creates a new IPsec policy.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param i_psec_policy_prototype [IPsecPolicyPrototype] The IPsec policy prototype object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPsecPolicy, Integer, Hash)>] IPsecPolicy data, response status code and response headers
    def create_ipsec_policy_with_http_info(version, generation, i_psec_policy_prototype, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.create_ipsec_policy ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.create_ipsec_policy"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.create_ipsec_policy, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.create_ipsec_policy"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'i_psec_policy_prototype' is set
      if @api_client.config.client_side_validation && i_psec_policy_prototype.nil?
        fail ArgumentError, "Missing the required parameter 'i_psec_policy_prototype' when calling VPNGatewaysApi.create_ipsec_policy"
      end
      # resource path
      local_var_path = '/ipsec_policies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(i_psec_policy_prototype) 

      # return_type
      return_type = opts[:return_type] || 'IPsecPolicy' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#create_ipsec_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a VPN gateway
    # This request creates a new VPN gateway.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_prototype [VPNGatewayPrototype] The VPN gateway prototype object.
    # @param [Hash] opts the optional parameters
    # @return [VPNGateway]
    def create_vpn_gateway(version, generation, vpn_gateway_prototype, opts = {})
      data, _status_code, _headers = create_vpn_gateway_with_http_info(version, generation, vpn_gateway_prototype, opts)
      data
    end

    # Create a VPN gateway
    # This request creates a new VPN gateway.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_prototype [VPNGatewayPrototype] The VPN gateway prototype object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPNGateway, Integer, Hash)>] VPNGateway data, response status code and response headers
    def create_vpn_gateway_with_http_info(version, generation, vpn_gateway_prototype, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.create_vpn_gateway ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.create_vpn_gateway"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.create_vpn_gateway, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.create_vpn_gateway"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpn_gateway_prototype' is set
      if @api_client.config.client_side_validation && vpn_gateway_prototype.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_prototype' when calling VPNGatewaysApi.create_vpn_gateway"
      end
      # resource path
      local_var_path = '/vpn_gateways'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(vpn_gateway_prototype) 

      # return_type
      return_type = opts[:return_type] || 'VPNGateway' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#create_vpn_gateway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a VPN gateway connection
    # This request creates a new VPN gateway connection.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param vpn_gateway_connection_prototype [VPNGatewayConnectionPrototype] The VPN gateway connection prototype object.
    # @param [Hash] opts the optional parameters
    # @return [VPNGatewayConnection]
    def create_vpn_gateway_connection(version, generation, vpn_gateway_id, vpn_gateway_connection_prototype, opts = {})
      data, _status_code, _headers = create_vpn_gateway_connection_with_http_info(version, generation, vpn_gateway_id, vpn_gateway_connection_prototype, opts)
      data
    end

    # Create a VPN gateway connection
    # This request creates a new VPN gateway connection.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param vpn_gateway_connection_prototype [VPNGatewayConnectionPrototype] The VPN gateway connection prototype object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPNGatewayConnection, Integer, Hash)>] VPNGatewayConnection data, response status code and response headers
    def create_vpn_gateway_connection_with_http_info(version, generation, vpn_gateway_id, vpn_gateway_connection_prototype, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.create_vpn_gateway_connection ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.create_vpn_gateway_connection"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.create_vpn_gateway_connection, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.create_vpn_gateway_connection"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpn_gateway_id' is set
      if @api_client.config.client_side_validation && vpn_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_id' when calling VPNGatewaysApi.create_vpn_gateway_connection"
      end
      # verify the required parameter 'vpn_gateway_connection_prototype' is set
      if @api_client.config.client_side_validation && vpn_gateway_connection_prototype.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_connection_prototype' when calling VPNGatewaysApi.create_vpn_gateway_connection"
      end
      # resource path
      local_var_path = '/vpn_gateways/{vpn_gateway_id}/connections'.sub('{' + 'vpn_gateway_id' + '}', CGI.escape(vpn_gateway_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(vpn_gateway_connection_prototype) 

      # return_type
      return_type = opts[:return_type] || 'VPNGatewayConnection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#create_vpn_gateway_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an IKE policy
    # This request deletes an IKE policy. This operation cannot be reversed.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The IKE policy identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ike_policy(version, generation, id, opts = {})
      delete_ike_policy_with_http_info(version, generation, id, opts)
      nil
    end

    # Delete an IKE policy
    # This request deletes an IKE policy. This operation cannot be reversed.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The IKE policy identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_ike_policy_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.delete_ike_policy ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.delete_ike_policy"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.delete_ike_policy, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.delete_ike_policy"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.delete_ike_policy"
      end
      # resource path
      local_var_path = '/ike_policies/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#delete_ike_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an IPsec policy
    # This request deletes an IPsec policy. This operation cannot be reversed.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The IPsec policy identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ipsec_policy(version, generation, id, opts = {})
      delete_ipsec_policy_with_http_info(version, generation, id, opts)
      nil
    end

    # Delete an IPsec policy
    # This request deletes an IPsec policy. This operation cannot be reversed.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The IPsec policy identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_ipsec_policy_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.delete_ipsec_policy ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.delete_ipsec_policy"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.delete_ipsec_policy, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.delete_ipsec_policy"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.delete_ipsec_policy"
      end
      # resource path
      local_var_path = '/ipsec_policies/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#delete_ipsec_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a VPN gateway
    # This request deletes a VPN gateway. A VPN gateway with a `status` of `pending` cannot be deleted. This operation deletes all VPN gateway connections associated with this VPN gateway.  This operation cannot be reversed.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The VPN gateway identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpn_gateway(version, generation, id, opts = {})
      delete_vpn_gateway_with_http_info(version, generation, id, opts)
      nil
    end

    # Delete a VPN gateway
    # This request deletes a VPN gateway. A VPN gateway with a &#x60;status&#x60; of &#x60;pending&#x60; cannot be deleted. This operation deletes all VPN gateway connections associated with this VPN gateway.  This operation cannot be reversed.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The VPN gateway identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_vpn_gateway_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.delete_vpn_gateway ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.delete_vpn_gateway"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.delete_vpn_gateway, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.delete_vpn_gateway"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.delete_vpn_gateway"
      end
      # resource path
      local_var_path = '/vpn_gateways/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#delete_vpn_gateway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a VPN gateway connection
    # This request deletes a VPN gateway connection. This operation cannot be reversed.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vpn_gateway_connection(version, generation, vpn_gateway_id, id, opts = {})
      delete_vpn_gateway_connection_with_http_info(version, generation, vpn_gateway_id, id, opts)
      nil
    end

    # Delete a VPN gateway connection
    # This request deletes a VPN gateway connection. This operation cannot be reversed.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_vpn_gateway_connection_with_http_info(version, generation, vpn_gateway_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.delete_vpn_gateway_connection ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.delete_vpn_gateway_connection"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.delete_vpn_gateway_connection, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.delete_vpn_gateway_connection"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpn_gateway_id' is set
      if @api_client.config.client_side_validation && vpn_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_id' when calling VPNGatewaysApi.delete_vpn_gateway_connection"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.delete_vpn_gateway_connection"
      end
      # resource path
      local_var_path = '/vpn_gateways/{vpn_gateway_id}/connections/{id}'.sub('{' + 'vpn_gateway_id' + '}', CGI.escape(vpn_gateway_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#delete_vpn_gateway_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the specified IKE policy
    # This request retrieves a single IKE policy specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The IKE policy identifier
    # @param [Hash] opts the optional parameters
    # @return [IKEPolicy]
    def get_ike_policy(version, generation, id, opts = {})
      data, _status_code, _headers = get_ike_policy_with_http_info(version, generation, id, opts)
      data
    end

    # Retrieve the specified IKE policy
    # This request retrieves a single IKE policy specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The IKE policy identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(IKEPolicy, Integer, Hash)>] IKEPolicy data, response status code and response headers
    def get_ike_policy_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.get_ike_policy ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.get_ike_policy"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.get_ike_policy, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.get_ike_policy"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.get_ike_policy"
      end
      # resource path
      local_var_path = '/ike_policies/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'IKEPolicy' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#get_ike_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the specified IPsec policy
    # This request retrieves a single IPsec policy specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The IPsec policy identifier
    # @param [Hash] opts the optional parameters
    # @return [IPsecPolicy]
    def get_ipsec_policy(version, generation, id, opts = {})
      data, _status_code, _headers = get_ipsec_policy_with_http_info(version, generation, id, opts)
      data
    end

    # Retrieve the specified IPsec policy
    # This request retrieves a single IPsec policy specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The IPsec policy identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPsecPolicy, Integer, Hash)>] IPsecPolicy data, response status code and response headers
    def get_ipsec_policy_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.get_ipsec_policy ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.get_ipsec_policy"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.get_ipsec_policy, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.get_ipsec_policy"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.get_ipsec_policy"
      end
      # resource path
      local_var_path = '/ipsec_policies/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'IPsecPolicy' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#get_ipsec_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the specified VPN gateway
    # This request retrieves a single VPN gateway specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The VPN gateway identifier
    # @param [Hash] opts the optional parameters
    # @return [VPNGateway]
    def get_vpn_gateway(version, generation, id, opts = {})
      data, _status_code, _headers = get_vpn_gateway_with_http_info(version, generation, id, opts)
      data
    end

    # Retrieve the specified VPN gateway
    # This request retrieves a single VPN gateway specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The VPN gateway identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPNGateway, Integer, Hash)>] VPNGateway data, response status code and response headers
    def get_vpn_gateway_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.get_vpn_gateway ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.get_vpn_gateway"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.get_vpn_gateway, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.get_vpn_gateway"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.get_vpn_gateway"
      end
      # resource path
      local_var_path = '/vpn_gateways/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'VPNGateway' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#get_vpn_gateway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the specified VPN gateway connection
    # This request retrieves a single VPN gateway connection specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param [Hash] opts the optional parameters
    # @return [VPNGatewayConnection]
    def get_vpn_gateway_connection(version, generation, vpn_gateway_id, id, opts = {})
      data, _status_code, _headers = get_vpn_gateway_connection_with_http_info(version, generation, vpn_gateway_id, id, opts)
      data
    end

    # Retrieve the specified VPN gateway connection
    # This request retrieves a single VPN gateway connection specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPNGatewayConnection, Integer, Hash)>] VPNGatewayConnection data, response status code and response headers
    def get_vpn_gateway_connection_with_http_info(version, generation, vpn_gateway_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.get_vpn_gateway_connection ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.get_vpn_gateway_connection"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.get_vpn_gateway_connection, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.get_vpn_gateway_connection"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpn_gateway_id' is set
      if @api_client.config.client_side_validation && vpn_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_id' when calling VPNGatewaysApi.get_vpn_gateway_connection"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.get_vpn_gateway_connection"
      end
      # resource path
      local_var_path = '/vpn_gateways/{vpn_gateway_id}/connections/{id}'.sub('{' + 'vpn_gateway_id' + '}', CGI.escape(vpn_gateway_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'VPNGatewayConnection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#get_vpn_gateway_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all IKE policies
    # This request retrieves a paginated list of all IKE policies that belong to this account.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page (default to 50)
    # @return [IKEPolicyCollection]
    def list_ike_policies(version, generation, opts = {})
      data, _status_code, _headers = list_ike_policies_with_http_info(version, generation, opts)
      data
    end

    # List all IKE policies
    # This request retrieves a paginated list of all IKE policies that belong to this account.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page
    # @return [Array<(IKEPolicyCollection, Integer, Hash)>] IKEPolicyCollection data, response status code and response headers
    def list_ike_policies_with_http_info(version, generation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.list_ike_policies ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.list_ike_policies"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.list_ike_policies, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.list_ike_policies"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VPNGatewaysApi.list_ike_policies, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VPNGatewaysApi.list_ike_policies, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/ike_policies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'IKEPolicyCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#list_ike_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all connections that use the specified IKE policy
    # This request lists all the connections that use the specified policy.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The IKE policy identifier
    # @param [Hash] opts the optional parameters
    # @return [VPNGatewayConnectionCollection]
    def list_ike_policy_connections(version, generation, id, opts = {})
      data, _status_code, _headers = list_ike_policy_connections_with_http_info(version, generation, id, opts)
      data
    end

    # List all connections that use the specified IKE policy
    # This request lists all the connections that use the specified policy.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The IKE policy identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPNGatewayConnectionCollection, Integer, Hash)>] VPNGatewayConnectionCollection data, response status code and response headers
    def list_ike_policy_connections_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.list_ike_policy_connections ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.list_ike_policy_connections"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.list_ike_policy_connections, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.list_ike_policy_connections"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.list_ike_policy_connections"
      end
      # resource path
      local_var_path = '/ike_policies/{id}/connections'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'VPNGatewayConnectionCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#list_ike_policy_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all IPsec policies
    # This request retrieves a paginated list of all IPsec policies that belong to this account.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page (default to 50)
    # @return [IPsecPolicyCollection]
    def list_ipsec_policies(version, generation, opts = {})
      data, _status_code, _headers = list_ipsec_policies_with_http_info(version, generation, opts)
      data
    end

    # List all IPsec policies
    # This request retrieves a paginated list of all IPsec policies that belong to this account.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page
    # @return [Array<(IPsecPolicyCollection, Integer, Hash)>] IPsecPolicyCollection data, response status code and response headers
    def list_ipsec_policies_with_http_info(version, generation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.list_ipsec_policies ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.list_ipsec_policies"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.list_ipsec_policies, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.list_ipsec_policies"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VPNGatewaysApi.list_ipsec_policies, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VPNGatewaysApi.list_ipsec_policies, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/ipsec_policies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'IPsecPolicyCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#list_ipsec_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all connections that use the specified IPsec policy
    # This request lists all the connections that use the specified policy.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The IPsec policy identifier
    # @param [Hash] opts the optional parameters
    # @return [VPNGatewayConnectionCollection]
    def list_ipsec_policy_connections(version, generation, id, opts = {})
      data, _status_code, _headers = list_ipsec_policy_connections_with_http_info(version, generation, id, opts)
      data
    end

    # List all connections that use the specified IPsec policy
    # This request lists all the connections that use the specified policy.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The IPsec policy identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPNGatewayConnectionCollection, Integer, Hash)>] VPNGatewayConnectionCollection data, response status code and response headers
    def list_ipsec_policy_connections_with_http_info(version, generation, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.list_ipsec_policy_connections ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.list_ipsec_policy_connections"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.list_ipsec_policy_connections, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.list_ipsec_policy_connections"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.list_ipsec_policy_connections"
      end
      # resource path
      local_var_path = '/ipsec_policies/{id}/connections'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'VPNGatewayConnectionCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#list_ipsec_policy_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all local CIDRs for a VPN gateway connection
    # This request lists all local CIDRs for a VPN gateway connection specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param [Hash] opts the optional parameters
    # @return [VPNGatewayConnectionLocalCIDRs]
    def list_vpn_gateway_connection_local_cidrs(version, generation, vpn_gateway_id, id, opts = {})
      data, _status_code, _headers = list_vpn_gateway_connection_local_cidrs_with_http_info(version, generation, vpn_gateway_id, id, opts)
      data
    end

    # List all local CIDRs for a VPN gateway connection
    # This request lists all local CIDRs for a VPN gateway connection specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPNGatewayConnectionLocalCIDRs, Integer, Hash)>] VPNGatewayConnectionLocalCIDRs data, response status code and response headers
    def list_vpn_gateway_connection_local_cidrs_with_http_info(version, generation, vpn_gateway_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.list_vpn_gateway_connection_local_cidrs ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.list_vpn_gateway_connection_local_cidrs"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.list_vpn_gateway_connection_local_cidrs, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.list_vpn_gateway_connection_local_cidrs"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpn_gateway_id' is set
      if @api_client.config.client_side_validation && vpn_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_id' when calling VPNGatewaysApi.list_vpn_gateway_connection_local_cidrs"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.list_vpn_gateway_connection_local_cidrs"
      end
      # resource path
      local_var_path = '/vpn_gateways/{vpn_gateway_id}/connections/{id}/local_cidrs'.sub('{' + 'vpn_gateway_id' + '}', CGI.escape(vpn_gateway_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'VPNGatewayConnectionLocalCIDRs' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#list_vpn_gateway_connection_local_cidrs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all peer CIDRs for a VPN gateway connection
    # This request lists all peer CIDRs for a VPN gateway connection specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param [Hash] opts the optional parameters
    # @return [VPNGatewayConnectionPeerCIDRs]
    def list_vpn_gateway_connection_peer_cidrs(version, generation, vpn_gateway_id, id, opts = {})
      data, _status_code, _headers = list_vpn_gateway_connection_peer_cidrs_with_http_info(version, generation, vpn_gateway_id, id, opts)
      data
    end

    # List all peer CIDRs for a VPN gateway connection
    # This request lists all peer CIDRs for a VPN gateway connection specified by the identifier in the URL.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPNGatewayConnectionPeerCIDRs, Integer, Hash)>] VPNGatewayConnectionPeerCIDRs data, response status code and response headers
    def list_vpn_gateway_connection_peer_cidrs_with_http_info(version, generation, vpn_gateway_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.list_vpn_gateway_connection_peer_cidrs ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.list_vpn_gateway_connection_peer_cidrs"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.list_vpn_gateway_connection_peer_cidrs, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.list_vpn_gateway_connection_peer_cidrs"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpn_gateway_id' is set
      if @api_client.config.client_side_validation && vpn_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_id' when calling VPNGatewaysApi.list_vpn_gateway_connection_peer_cidrs"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.list_vpn_gateway_connection_peer_cidrs"
      end
      # resource path
      local_var_path = '/vpn_gateways/{vpn_gateway_id}/connections/{id}/peer_cidrs'.sub('{' + 'vpn_gateway_id' + '}', CGI.escape(vpn_gateway_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'VPNGatewayConnectionPeerCIDRs' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#list_vpn_gateway_connection_peer_cidrs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all connections of a VPN gateway
    # This request lists all the connections of a particular VPN gateway.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Filters the collection to VPN gateway connections with the specified status
    # @return [VPNGatewayConnectionCollection]
    def list_vpn_gateway_connections(version, generation, vpn_gateway_id, opts = {})
      data, _status_code, _headers = list_vpn_gateway_connections_with_http_info(version, generation, vpn_gateway_id, opts)
      data
    end

    # List all connections of a VPN gateway
    # This request lists all the connections of a particular VPN gateway.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Filters the collection to VPN gateway connections with the specified status
    # @return [Array<(VPNGatewayConnectionCollection, Integer, Hash)>] VPNGatewayConnectionCollection data, response status code and response headers
    def list_vpn_gateway_connections_with_http_info(version, generation, vpn_gateway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.list_vpn_gateway_connections ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.list_vpn_gateway_connections"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.list_vpn_gateway_connections, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.list_vpn_gateway_connections"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpn_gateway_id' is set
      if @api_client.config.client_side_validation && vpn_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_id' when calling VPNGatewaysApi.list_vpn_gateway_connections"
      end
      # resource path
      local_var_path = '/vpn_gateways/{vpn_gateway_id}/connections'.sub('{' + 'vpn_gateway_id' + '}', CGI.escape(vpn_gateway_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'VPNGatewayConnectionCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#list_vpn_gateway_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all VPN gateways
    # This request retrieves a paginated list of all VPN gateways that belong to this account.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page (default to 50)
    # @option opts [String] :resource_group_id Filters the collection to resources within one of the resource groups identified in a comma-separated list of resource group identifiers
    # @return [VPNGatewayCollection]
    def list_vpn_gateways(version, generation, opts = {})
      data, _status_code, _headers = list_vpn_gateways_with_http_info(version, generation, opts)
      data
    end

    # List all VPN gateways
    # This request retrieves a paginated list of all VPN gateways that belong to this account.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start A server-supplied token determining what resource to start the page on
    # @option opts [Integer] :limit The number of resources to return on a page
    # @option opts [String] :resource_group_id Filters the collection to resources within one of the resource groups identified in a comma-separated list of resource group identifiers
    # @return [Array<(VPNGatewayCollection, Integer, Hash)>] VPNGatewayCollection data, response status code and response headers
    def list_vpn_gateways_with_http_info(version, generation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.list_vpn_gateways ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.list_vpn_gateways"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.list_vpn_gateways, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.list_vpn_gateways"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VPNGatewaysApi.list_vpn_gateways, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VPNGatewaysApi.list_vpn_gateways, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vpn_gateways'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'resource_group.id'] = opts[:'resource_group_id'] if !opts[:'resource_group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'VPNGatewayCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#list_vpn_gateways\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a local CIDR from a VPN gateway connection
    # This request removes a CIDR from a VPN gateway connection.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param cidr_prefix [String] The address prefix part of the CIDR
    # @param prefix_length [String] The prefix length part of the CIDR
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_vpn_gateway_connection_local_cidr(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts = {})
      remove_vpn_gateway_connection_local_cidr_with_http_info(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts)
      nil
    end

    # Remove a local CIDR from a VPN gateway connection
    # This request removes a CIDR from a VPN gateway connection.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param cidr_prefix [String] The address prefix part of the CIDR
    # @param prefix_length [String] The prefix length part of the CIDR
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_vpn_gateway_connection_local_cidr_with_http_info(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.remove_vpn_gateway_connection_local_cidr ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.remove_vpn_gateway_connection_local_cidr"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.remove_vpn_gateway_connection_local_cidr, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.remove_vpn_gateway_connection_local_cidr"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpn_gateway_id' is set
      if @api_client.config.client_side_validation && vpn_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_id' when calling VPNGatewaysApi.remove_vpn_gateway_connection_local_cidr"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.remove_vpn_gateway_connection_local_cidr"
      end
      # verify the required parameter 'cidr_prefix' is set
      if @api_client.config.client_side_validation && cidr_prefix.nil?
        fail ArgumentError, "Missing the required parameter 'cidr_prefix' when calling VPNGatewaysApi.remove_vpn_gateway_connection_local_cidr"
      end
      # verify the required parameter 'prefix_length' is set
      if @api_client.config.client_side_validation && prefix_length.nil?
        fail ArgumentError, "Missing the required parameter 'prefix_length' when calling VPNGatewaysApi.remove_vpn_gateway_connection_local_cidr"
      end
      # resource path
      local_var_path = '/vpn_gateways/{vpn_gateway_id}/connections/{id}/local_cidrs/{cidr_prefix}/{prefix_length}'.sub('{' + 'vpn_gateway_id' + '}', CGI.escape(vpn_gateway_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'cidr_prefix' + '}', CGI.escape(cidr_prefix.to_s)).sub('{' + 'prefix_length' + '}', CGI.escape(prefix_length.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#remove_vpn_gateway_connection_local_cidr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a peer CIDR from a VPN gateway connection
    # This request removes a CIDR from a VPN gateway connection.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param cidr_prefix [String] The address prefix part of the CIDR
    # @param prefix_length [String] The prefix length part of the CIDR
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_vpn_gateway_connection_peer_cidr(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts = {})
      remove_vpn_gateway_connection_peer_cidr_with_http_info(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts)
      nil
    end

    # Remove a peer CIDR from a VPN gateway connection
    # This request removes a CIDR from a VPN gateway connection.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param cidr_prefix [String] The address prefix part of the CIDR
    # @param prefix_length [String] The prefix length part of the CIDR
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_vpn_gateway_connection_peer_cidr_with_http_info(version, generation, vpn_gateway_id, id, cidr_prefix, prefix_length, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.remove_vpn_gateway_connection_peer_cidr ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.remove_vpn_gateway_connection_peer_cidr"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.remove_vpn_gateway_connection_peer_cidr, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.remove_vpn_gateway_connection_peer_cidr"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpn_gateway_id' is set
      if @api_client.config.client_side_validation && vpn_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_id' when calling VPNGatewaysApi.remove_vpn_gateway_connection_peer_cidr"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.remove_vpn_gateway_connection_peer_cidr"
      end
      # verify the required parameter 'cidr_prefix' is set
      if @api_client.config.client_side_validation && cidr_prefix.nil?
        fail ArgumentError, "Missing the required parameter 'cidr_prefix' when calling VPNGatewaysApi.remove_vpn_gateway_connection_peer_cidr"
      end
      # verify the required parameter 'prefix_length' is set
      if @api_client.config.client_side_validation && prefix_length.nil?
        fail ArgumentError, "Missing the required parameter 'prefix_length' when calling VPNGatewaysApi.remove_vpn_gateway_connection_peer_cidr"
      end
      # resource path
      local_var_path = '/vpn_gateways/{vpn_gateway_id}/connections/{id}/peer_cidrs/{cidr_prefix}/{prefix_length}'.sub('{' + 'vpn_gateway_id' + '}', CGI.escape(vpn_gateway_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'cidr_prefix' + '}', CGI.escape(cidr_prefix.to_s)).sub('{' + 'prefix_length' + '}', CGI.escape(prefix_length.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#remove_vpn_gateway_connection_peer_cidr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an IKE policy
    # This request updates the properties of an existing IKE policy.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The IKE policy identifier
    # @param ike_policy_patch [IKEPolicyPatch] The IKE policy patch.
    # @param [Hash] opts the optional parameters
    # @return [IKEPolicy]
    def update_ike_policy(version, generation, id, ike_policy_patch, opts = {})
      data, _status_code, _headers = update_ike_policy_with_http_info(version, generation, id, ike_policy_patch, opts)
      data
    end

    # Update an IKE policy
    # This request updates the properties of an existing IKE policy.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The IKE policy identifier
    # @param ike_policy_patch [IKEPolicyPatch] The IKE policy patch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IKEPolicy, Integer, Hash)>] IKEPolicy data, response status code and response headers
    def update_ike_policy_with_http_info(version, generation, id, ike_policy_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.update_ike_policy ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.update_ike_policy"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.update_ike_policy, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.update_ike_policy"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.update_ike_policy"
      end
      # verify the required parameter 'ike_policy_patch' is set
      if @api_client.config.client_side_validation && ike_policy_patch.nil?
        fail ArgumentError, "Missing the required parameter 'ike_policy_patch' when calling VPNGatewaysApi.update_ike_policy"
      end
      # resource path
      local_var_path = '/ike_policies/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(ike_policy_patch) 

      # return_type
      return_type = opts[:return_type] || 'IKEPolicy' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#update_ike_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an IPsec policy
    # This request updates the properties of an existing IPsec policy.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The IPsec policy identifier
    # @param i_psec_policy_patch [IPsecPolicyPatch] The IPsec policy patch.
    # @param [Hash] opts the optional parameters
    # @return [IPsecPolicy]
    def update_ipsec_policy(version, generation, id, i_psec_policy_patch, opts = {})
      data, _status_code, _headers = update_ipsec_policy_with_http_info(version, generation, id, i_psec_policy_patch, opts)
      data
    end

    # Update an IPsec policy
    # This request updates the properties of an existing IPsec policy.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The IPsec policy identifier
    # @param i_psec_policy_patch [IPsecPolicyPatch] The IPsec policy patch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPsecPolicy, Integer, Hash)>] IPsecPolicy data, response status code and response headers
    def update_ipsec_policy_with_http_info(version, generation, id, i_psec_policy_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.update_ipsec_policy ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.update_ipsec_policy"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.update_ipsec_policy, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.update_ipsec_policy"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.update_ipsec_policy"
      end
      # verify the required parameter 'i_psec_policy_patch' is set
      if @api_client.config.client_side_validation && i_psec_policy_patch.nil?
        fail ArgumentError, "Missing the required parameter 'i_psec_policy_patch' when calling VPNGatewaysApi.update_ipsec_policy"
      end
      # resource path
      local_var_path = '/ipsec_policies/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(i_psec_policy_patch) 

      # return_type
      return_type = opts[:return_type] || 'IPsecPolicy' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#update_ipsec_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a VPN gateway
    # This request updates the properties of an existing VPN gateway.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The VPN gateway identifier
    # @param vpn_gateway_patch [VPNGatewayPatch] The VPN gateway patch.
    # @param [Hash] opts the optional parameters
    # @return [VPNGateway]
    def update_vpn_gateway(version, generation, id, vpn_gateway_patch, opts = {})
      data, _status_code, _headers = update_vpn_gateway_with_http_info(version, generation, id, vpn_gateway_patch, opts)
      data
    end

    # Update a VPN gateway
    # This request updates the properties of an existing VPN gateway.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param id [String] The VPN gateway identifier
    # @param vpn_gateway_patch [VPNGatewayPatch] The VPN gateway patch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPNGateway, Integer, Hash)>] VPNGateway data, response status code and response headers
    def update_vpn_gateway_with_http_info(version, generation, id, vpn_gateway_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.update_vpn_gateway ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.update_vpn_gateway"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.update_vpn_gateway, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.update_vpn_gateway"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.update_vpn_gateway"
      end
      # verify the required parameter 'vpn_gateway_patch' is set
      if @api_client.config.client_side_validation && vpn_gateway_patch.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_patch' when calling VPNGatewaysApi.update_vpn_gateway"
      end
      # resource path
      local_var_path = '/vpn_gateways/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(vpn_gateway_patch) 

      # return_type
      return_type = opts[:return_type] || 'VPNGateway' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#update_vpn_gateway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a VPN gateway connection
    # This request updates the properties of an existing VPN gateway connection.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param vpn_gateway_connection_patch [VPNGatewayConnectionPatch] The VPN gateway connection patch.
    # @param [Hash] opts the optional parameters
    # @return [VPNGatewayConnection]
    def update_vpn_gateway_connection(version, generation, vpn_gateway_id, id, vpn_gateway_connection_patch, opts = {})
      data, _status_code, _headers = update_vpn_gateway_connection_with_http_info(version, generation, vpn_gateway_id, id, vpn_gateway_connection_patch, opts)
      data
    end

    # Update a VPN gateway connection
    # This request updates the properties of an existing VPN gateway connection.
    # @param version [String] Requests the version of the API as of a date in the format &#x60;YYYY-MM-DD&#x60;. Any date up to the current date may be provided. Specify the current date to request the latest version.
    # @param generation [Integer] The infrastructure generation for the request. For the API behavior documented here, use &#x60;2&#x60;.
    # @param vpn_gateway_id [String] The VPN gateway identifier
    # @param id [String] The VPN gateway connection identifier
    # @param vpn_gateway_connection_patch [VPNGatewayConnectionPatch] The VPN gateway connection patch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPNGatewayConnection, Integer, Hash)>] VPNGatewayConnection data, response status code and response headers
    def update_vpn_gateway_connection_with_http_info(version, generation, vpn_gateway_id, id, vpn_gateway_connection_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNGatewaysApi.update_vpn_gateway_connection ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VPNGatewaysApi.update_vpn_gateway_connection"
      end
      pattern = Regexp.new(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)
      if @api_client.config.client_side_validation && version !~ pattern
        fail ArgumentError, "invalid value for 'version' when calling VPNGatewaysApi.update_vpn_gateway_connection, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'generation' is set
      if @api_client.config.client_side_validation && generation.nil?
        fail ArgumentError, "Missing the required parameter 'generation' when calling VPNGatewaysApi.update_vpn_gateway_connection"
      end
      # verify enum value
      allowable_values = [2]
      if @api_client.config.client_side_validation && !allowable_values.include?(generation)
        fail ArgumentError, "invalid value for \"generation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vpn_gateway_id' is set
      if @api_client.config.client_side_validation && vpn_gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_id' when calling VPNGatewaysApi.update_vpn_gateway_connection"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VPNGatewaysApi.update_vpn_gateway_connection"
      end
      # verify the required parameter 'vpn_gateway_connection_patch' is set
      if @api_client.config.client_side_validation && vpn_gateway_connection_patch.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_gateway_connection_patch' when calling VPNGatewaysApi.update_vpn_gateway_connection"
      end
      # resource path
      local_var_path = '/vpn_gateways/{vpn_gateway_id}/connections/{id}'.sub('{' + 'vpn_gateway_id' + '}', CGI.escape(vpn_gateway_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'generation'] = generation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(vpn_gateway_connection_patch) 

      # return_type
      return_type = opts[:return_type] || 'VPNGatewayConnection' 

      # auth_names
      auth_names = opts[:auth_names] || ['iamToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNGatewaysApi#update_vpn_gateway_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
